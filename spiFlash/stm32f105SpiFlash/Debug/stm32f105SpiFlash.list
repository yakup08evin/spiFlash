
stm32f105SpiFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a30  08003a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a38  08003a38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006534  20000070  08003ab0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065a4  08003ab0  000265a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008279  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  00028312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00029bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1f8  00000000  00000000  0002ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099ab  00000000  00000000  00048f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad428  00000000  00000000  0005291b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffd43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000ffd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003974 	.word	0x08003974

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003974 	.word	0x08003974

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b976 	b.w	8000538 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	4688      	mov	r8, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14d      	bne.n	8000310 <__udivmoddi4+0xac>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d968      	bls.n	800034c <__udivmoddi4+0xe8>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b152      	cbz	r2, 8000296 <__udivmoddi4+0x32>
 8000280:	fa01 f302 	lsl.w	r3, r1, r2
 8000284:	f1c2 0120 	rsb	r1, r2, #32
 8000288:	fa20 f101 	lsr.w	r1, r0, r1
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	ea41 0803 	orr.w	r8, r1, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800029a:	fbb8 f7f1 	udiv	r7, r8, r1
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	fb01 8817 	mls	r8, r1, r7, r8
 80002a6:	fb07 f00e 	mul.w	r0, r7, lr
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b0:	4298      	cmp	r0, r3
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0303 	adds.w	r3, ip, r3
 80002b8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80002bc:	f080 811e 	bcs.w	80004fc <__udivmoddi4+0x298>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f240 811b 	bls.w	80004fc <__udivmoddi4+0x298>
 80002c6:	3f02      	subs	r7, #2
 80002c8:	4463      	add	r3, ip
 80002ca:	1a1b      	subs	r3, r3, r0
 80002cc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002d0:	fb01 3310 	mls	r3, r1, r0, r3
 80002d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002de:	45a6      	cmp	lr, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8109 	bcs.w	8000500 <__udivmoddi4+0x29c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f240 8106 	bls.w	8000500 <__udivmoddi4+0x29c>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	2100      	movs	r1, #0
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000302:	b11e      	cbz	r6, 800030c <__udivmoddi4+0xa8>
 8000304:	2300      	movs	r3, #0
 8000306:	40d4      	lsrs	r4, r2
 8000308:	e9c6 4300 	strd	r4, r3, [r6]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0xc2>
 8000314:	2e00      	cmp	r6, #0
 8000316:	f000 80ee 	beq.w	80004f6 <__udivmoddi4+0x292>
 800031a:	2100      	movs	r1, #0
 800031c:	e9c6 0500 	strd	r0, r5, [r6]
 8000320:	4608      	mov	r0, r1
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x160>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd4>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fc 	bhi.w	8000530 <__udivmoddi4+0x2cc>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0303 	sbc.w	r3, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e2      	beq.n	800030c <__udivmoddi4+0xa8>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7df      	b.n	800030c <__udivmoddi4+0xa8>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xec>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 8091 	bne.w	800047c <__udivmoddi4+0x218>
 800035a:	eba1 000c 	sub.w	r0, r1, ip
 800035e:	2101      	movs	r1, #1
 8000360:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000364:	fa1f fe8c 	uxth.w	lr, ip
 8000368:	fbb0 f3f7 	udiv	r3, r0, r7
 800036c:	fb07 0013 	mls	r0, r7, r3, r0
 8000370:	0c25      	lsrs	r5, r4, #16
 8000372:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000376:	fb0e f003 	mul.w	r0, lr, r3
 800037a:	42a8      	cmp	r0, r5
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x12c>
 800037e:	eb1c 0505 	adds.w	r5, ip, r5
 8000382:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x12a>
 8000388:	42a8      	cmp	r0, r5
 800038a:	f200 80ce 	bhi.w	800052a <__udivmoddi4+0x2c6>
 800038e:	4643      	mov	r3, r8
 8000390:	1a2d      	subs	r5, r5, r0
 8000392:	fbb5 f0f7 	udiv	r0, r5, r7
 8000396:	fb07 5510 	mls	r5, r7, r0, r5
 800039a:	fb0e fe00 	mul.w	lr, lr, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x156>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x154>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80b6 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 80003b8:	4628      	mov	r0, r5
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	e79e      	b.n	8000302 <__udivmoddi4+0x9e>
 80003c4:	f1c1 0720 	rsb	r7, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	fbba f8f9 	udiv	r8, sl, r9
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e6:	408d      	lsls	r5, r1
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	431d      	orrs	r5, r3
 80003ee:	fa00 f301 	lsl.w	r3, r0, r1
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	0c2c      	lsrs	r4, r5, #16
 80003f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2bc>
 8000410:	42a0      	cmp	r0, r4
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2bc>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4464      	add	r4, ip
 800041c:	1a24      	subs	r4, r4, r0
 800041e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000422:	fb09 4410 	mls	r4, r9, r0, r4
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	b2ad      	uxth	r5, r5
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1e2>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2b4>
 800043e:	45a6      	cmp	lr, r4
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2b4>
 8000442:	3802      	subs	r0, #2
 8000444:	4464      	add	r4, ip
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	fba0 9502 	umull	r9, r5, r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	42ac      	cmp	r4, r5
 8000454:	46c8      	mov	r8, r9
 8000456:	46ae      	mov	lr, r5
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x2a4>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x2a0>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d069      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000460:	ebb3 0208 	subs.w	r2, r3, r8
 8000464:	eb64 040e 	sbc.w	r4, r4, lr
 8000468:	fa22 f301 	lsr.w	r3, r2, r1
 800046c:	fa04 f707 	lsl.w	r7, r4, r7
 8000470:	431f      	orrs	r7, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	2100      	movs	r1, #0
 800047a:	e747      	b.n	800030c <__udivmoddi4+0xa8>
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	f1c2 0120 	rsb	r1, r2, #32
 8000484:	fa25 f301 	lsr.w	r3, r5, r1
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa20 f101 	lsr.w	r1, r0, r1
 8000490:	4095      	lsls	r5, r2
 8000492:	430d      	orrs	r5, r1
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3311 	mls	r3, r7, r1, r3
 800049c:	fa1f fe8c 	uxth.w	lr, ip
 80004a0:	0c28      	lsrs	r0, r5, #16
 80004a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a6:	fb01 f30e 	mul.w	r3, r1, lr
 80004aa:	4283      	cmp	r3, r0
 80004ac:	fa04 f402 	lsl.w	r4, r4, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x260>
 80004b2:	eb1c 0000 	adds.w	r0, ip, r0
 80004b6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b8>
 80004bc:	4283      	cmp	r3, r0
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b8>
 80004c0:	3902      	subs	r1, #2
 80004c2:	4460      	add	r0, ip
 80004c4:	1ac0      	subs	r0, r0, r3
 80004c6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ca:	fb07 0013 	mls	r0, r7, r3, r0
 80004ce:	b2ad      	uxth	r5, r5
 80004d0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d4:	fb03 f00e 	mul.w	r0, r3, lr
 80004d8:	42a8      	cmp	r0, r5
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x28a>
 80004dc:	eb1c 0505 	adds.w	r5, ip, r5
 80004e0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004e6:	42a8      	cmp	r0, r5
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	4465      	add	r5, ip
 80004ee:	1a28      	subs	r0, r5, r0
 80004f0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0x104>
 80004f6:	4631      	mov	r1, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e707      	b.n	800030c <__udivmoddi4+0xa8>
 80004fc:	462f      	mov	r7, r5
 80004fe:	e6e4      	b.n	80002ca <__udivmoddi4+0x66>
 8000500:	4618      	mov	r0, r3
 8000502:	e6f9      	b.n	80002f8 <__udivmoddi4+0x94>
 8000504:	454b      	cmp	r3, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f8>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000510:	3801      	subs	r0, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f8>
 8000514:	4643      	mov	r3, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x28a>
 8000518:	4628      	mov	r0, r5
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1e2>
 800051c:	4641      	mov	r1, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x260>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b8>
 8000524:	4464      	add	r4, ip
 8000526:	3802      	subs	r0, #2
 8000528:	e747      	b.n	80003ba <__udivmoddi4+0x156>
 800052a:	3b02      	subs	r3, #2
 800052c:	4465      	add	r5, ip
 800052e:	e72f      	b.n	8000390 <__udivmoddi4+0x12c>
 8000530:	4608      	mov	r0, r1
 8000532:	e706      	b.n	8000342 <__udivmoddi4+0xde>
 8000534:	4631      	mov	r1, r6
 8000536:	e6e9      	b.n	800030c <__udivmoddi4+0xa8>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 ff05 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f88f 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f93b 	bl	80007c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800054e:	f000 f8d9 	bl	8000704 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f90d 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  W25qxx_Init();
 8000556:	f000 fbf7 	bl	8000d48 <W25qxx_Init>
  //W25qxx_EraseSector(5);
  //W25qxx_EraseSector(6);
  //spistruct.dataCount = 410;
  //spistruct.readData = 0;
  //spistruct.readOffset = 0;
  spistruct.writeOffset = 0;
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <main+0x110>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  spistruct.sectorNumberforWrite = 0;
 8000560:	4b3a      	ldr	r3, [pc, #232]	; (800064c <main+0x110>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  spistruct.writtenDataByte = 0;
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <main+0x110>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
  spistruct.readDataByte = 0;
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <main+0x110>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  spistruct.readOffset = 0;
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <main+0x110>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  spistruct.sectorNumberforRead = 0;
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <main+0x110>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  spistruct.allDataRead = 0;
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <main+0x110>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
	*/
//	W25qxx_Write(buffer1, 410);
//}


W25qxx_ReadSector(buffer2, 0, 0, 4096);
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	4830      	ldr	r0, [pc, #192]	; (8000650 <main+0x114>)
 8000590:	f000 fd6c 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer3, 1, 0, 4096);
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	482d      	ldr	r0, [pc, #180]	; (8000654 <main+0x118>)
 800059e:	f000 fd65 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer4, 2, 0, 4096);
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	2200      	movs	r2, #0
 80005a8:	2102      	movs	r1, #2
 80005aa:	482b      	ldr	r0, [pc, #172]	; (8000658 <main+0x11c>)
 80005ac:	f000 fd5e 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer5, 3, 0, 4096);
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	2200      	movs	r2, #0
 80005b6:	2103      	movs	r1, #3
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <main+0x120>)
 80005ba:	f000 fd57 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer6, 4, 0, 4096);
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	2200      	movs	r2, #0
 80005c4:	2104      	movs	r1, #4
 80005c6:	4826      	ldr	r0, [pc, #152]	; (8000660 <main+0x124>)
 80005c8:	f000 fd50 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer7, 5, 0, 4096);
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	2200      	movs	r2, #0
 80005d2:	2105      	movs	r1, #5
 80005d4:	4823      	ldr	r0, [pc, #140]	; (8000664 <main+0x128>)
 80005d6:	f000 fd49 	bl	800106c <W25qxx_ReadSector>


for (uint32_t i = 0;i<60000;i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e005      	b.n	80005ec <main+0xb0>
		spistruct.readOffset = findWord + spistruct.readOffset;
	}
	printmsg("%d-->%s\r\n",i,spistruct.sendBuffer);
	memset(spistruct.sendBuffer,0,sizeof(spistruct.sendBuffer));
	memset(buffer , 0 , sizeof(buffer));*/
	W25qxx_Read(i);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 fda5 	bl	8001130 <W25qxx_Read>
for (uint32_t i = 0;i<60000;i++){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d9f4      	bls.n	80005e0 <main+0xa4>

}

W25qxx_ReadSector(buffer2, 0, 0, 4096);
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <main+0x114>)
 8000600:	f000 fd34 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer3, 1, 0, 4096);
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <main+0x118>)
 800060e:	f000 fd2d 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer4, 2, 0, 4096);
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	2200      	movs	r2, #0
 8000618:	2102      	movs	r1, #2
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0x11c>)
 800061c:	f000 fd26 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer5, 3, 0, 4096);
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	2200      	movs	r2, #0
 8000626:	2103      	movs	r1, #3
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0x120>)
 800062a:	f000 fd1f 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer6, 4, 0, 4096);
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	2200      	movs	r2, #0
 8000634:	2104      	movs	r1, #4
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <main+0x124>)
 8000638:	f000 fd18 	bl	800106c <W25qxx_ReadSector>
W25qxx_ReadSector(buffer7, 5, 0, 4096);
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	2200      	movs	r2, #0
 8000642:	2105      	movs	r1, #5
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <main+0x128>)
 8000646:	f000 fd11 	bl	800106c <W25qxx_ReadSector>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x10e>
 800064c:	20006144 	.word	0x20006144
 8000650:	20000128 	.word	0x20000128
 8000654:	2000112c 	.word	0x2000112c
 8000658:	20002130 	.word	0x20002130
 800065c:	20003134 	.word	0x20003134
 8000660:	20004138 	.word	0x20004138
 8000664:	2000513c 	.word	0x2000513c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	; 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fcf2 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f94f 	bl	800195c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80006c4:	f000 f8f8 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fc50 	bl	8001f88 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ee:	f000 f8e3 	bl	80008b8 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <SystemClock_Config+0x98>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	42420070 	.word	0x42420070

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2210      	movs	r2, #16
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f001 fe63 	bl	8002420 <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f8aa 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000008c 	.word	0x2000008c
 800076c:	40013000 	.word	0x40013000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f002 fa6a 	bl	8002c80 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f881 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_GPIO_Init+0x8c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <MX_GPIO_Init+0x8c>)
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x90>)
 8000826:	f001 f881 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800082a:	2310      	movs	r3, #16
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0x90>)
 8000842:	f000 feef 	bl	8001624 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800

08000858 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *format,...)
{
 8000858:	b40f      	push	{r0, r1, r2, r3}
 800085a:	b580      	push	{r7, lr}
 800085c:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000860:	af00      	add	r7, sp, #0
	char str[1024];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000862:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000866:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800086a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800086e:	601a      	str	r2, [r3, #0]
	vsprintf(str, format,args);
 8000870:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000874:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000878:	f107 0008 	add.w	r0, r7, #8
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8000882:	f002 fc21 	bl	80030c8 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fcca 	bl	8000224 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f107 0108 	add.w	r1, r7, #8
 8000898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <printmsg+0x5c>)
 800089e:	f002 fa3c 	bl	8002d1a <HAL_UART_Transmit>
	va_end(args);

}
 80008a2:	bf00      	nop
 80008a4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80008a8:	46bd      	mov	sp, r7
 80008aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ae:	b004      	add	sp, #16
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200000e4 	.word	0x200000e4

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_SPI_MspInit+0x88>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d12f      	bne.n	80009a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 800094e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_SPI_MspInit+0x8c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <HAL_SPI_MspInit+0x90>)
 800098c:	f000 fe4a 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_SPI_MspInit+0x90>)
 80009a4:	f000 fe3e 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40013000 	.word	0x40013000
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_UART_MspInit+0xa4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13d      	bne.n	8000a58 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a20:	f000 fe00 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a24:	2340      	movs	r3, #64	; 0x40
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a38:	f000 fdf4 	bl	8001624 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_UART_MspInit+0xb0>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_UART_MspInit+0xb0>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40011400 	.word	0x40011400
 8000a6c:	40010000 	.word	0x40010000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 fc91 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f002 fa7e 	bl	8002ff0 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20010000 	.word	0x20010000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20006140 	.word	0x20006140
 8000b28:	200065a8 	.word	0x200065a8

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8000b42:	f107 020f 	add.w	r2, r7, #15
 8000b46:	1df9      	adds	r1, r7, #7
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <W25qxx_Spi+0x28>)
 8000b50:	f001 fdfb 	bl	800274a <HAL_SPI_TransmitReceive>
	return ret;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000008c 	.word	0x2000008c

08000b64 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <W25qxx_ReadID+0x68>)
 8000b80:	f000 fed4 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8000b84:	209f      	movs	r0, #159	; 0x9f
 8000b86:	f7ff ffd7 	bl	8000b38 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b8a:	20a5      	movs	r0, #165	; 0xa5
 8000b8c:	f7ff ffd4 	bl	8000b38 <W25qxx_Spi>
 8000b90:	4603      	mov	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b94:	20a5      	movs	r0, #165	; 0xa5
 8000b96:	f7ff ffcf 	bl	8000b38 <W25qxx_Spi>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b9e:	20a5      	movs	r0, #165	; 0xa5
 8000ba0:	f7ff ffca 	bl	8000b38 <W25qxx_Spi>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <W25qxx_ReadID+0x68>)
 8000bae:	f000 febd 	bl	800192c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
	return Temp;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010800 	.word	0x40010800

08000bd0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <W25qxx_ReadUniqID+0x64>)
 8000bdc:	f000 fea6 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8000be0:	204b      	movs	r0, #75	; 0x4b
 8000be2:	f7ff ffa9 	bl	8000b38 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e005      	b.n	8000bf8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000bec:	20a5      	movs	r0, #165	; 0xa5
 8000bee:	f7ff ffa3 	bl	8000b38 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d9f6      	bls.n	8000bec <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71bb      	strb	r3, [r7, #6]
 8000c02:	e00b      	b.n	8000c1c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000c04:	79bc      	ldrb	r4, [r7, #6]
 8000c06:	20a5      	movs	r0, #165	; 0xa5
 8000c08:	f7ff ff96 	bl	8000b38 <W25qxx_Spi>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <W25qxx_ReadUniqID+0x68>)
 8000c12:	4423      	add	r3, r4
 8000c14:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	71bb      	strb	r3, [r7, #6]
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d9f0      	bls.n	8000c04 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2110      	movs	r1, #16
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <W25qxx_ReadUniqID+0x64>)
 8000c28:	f000 fe80 	bl	800192c <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	40010800 	.word	0x40010800
 8000c38:	20006568 	.word	0x20006568

08000c3c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <W25qxx_WriteEnable+0x28>)
 8000c46:	f000 fe71 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8000c4a:	2006      	movs	r0, #6
 8000c4c:	f7ff ff74 	bl	8000b38 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <W25qxx_WriteEnable+0x28>)
 8000c56:	f000 fe69 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fbda 	bl	8001414 <HAL_Delay>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010800 	.word	0x40010800

08000c68 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2110      	movs	r1, #16
 8000c7a:	481c      	ldr	r0, [pc, #112]	; (8000cec <W25qxx_ReadStatusRegister+0x84>)
 8000c7c:	f000 fe56 	bl	800192c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d10c      	bne.n	8000ca0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000c86:	2005      	movs	r0, #5
 8000c88:	f7ff ff56 	bl	8000b38 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000c8c:	20a5      	movs	r0, #165	; 0xa5
 8000c8e:	f7ff ff53 	bl	8000b38 <W25qxx_Spi>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000c96:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <W25qxx_ReadStatusRegister+0x88>)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000c9e:	e01b      	b.n	8000cd8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d10c      	bne.n	8000cc0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000ca6:	2035      	movs	r0, #53	; 0x35
 8000ca8:	f7ff ff46 	bl	8000b38 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000cac:	20a5      	movs	r0, #165	; 0xa5
 8000cae:	f7ff ff43 	bl	8000b38 <W25qxx_Spi>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <W25qxx_ReadStatusRegister+0x88>)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000cbe:	e00b      	b.n	8000cd8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000cc0:	2015      	movs	r0, #21
 8000cc2:	f7ff ff39 	bl	8000b38 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000cc6:	20a5      	movs	r0, #165	; 0xa5
 8000cc8:	f7ff ff36 	bl	8000b38 <W25qxx_Spi>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <W25qxx_ReadStatusRegister+0x88>)
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <W25qxx_ReadStatusRegister+0x84>)
 8000cde:	f000 fe25 	bl	800192c <HAL_GPIO_WritePin>
	return status;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	20006568 	.word	0x20006568

08000cf4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fb8b 	bl	8001414 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <W25qxx_WaitForWriteEnd+0x4c>)
 8000d04:	f000 fe12 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff ff15 	bl	8000b38 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000d0e:	20a5      	movs	r0, #165	; 0xa5
 8000d10:	f7ff ff12 	bl	8000b38 <W25qxx_Spi>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <W25qxx_WaitForWriteEnd+0x50>)
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 fb78 	bl	8001414 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <W25qxx_WaitForWriteEnd+0x50>)
 8000d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1ed      	bne.n	8000d0e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2110      	movs	r1, #16
 8000d36:	4802      	ldr	r0, [pc, #8]	; (8000d40 <W25qxx_WaitForWriteEnd+0x4c>)
 8000d38:	f000 fdf8 	bl	800192c <HAL_GPIO_WritePin>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40010800 	.word	0x40010800
 8000d44:	20006568 	.word	0x20006568

08000d48 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000d4e:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8000d56:	e002      	b.n	8000d5e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f000 fb5b 	bl	8001414 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8000d5e:	f000 fb4f 	bl	8001400 <HAL_GetTick>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d9f7      	bls.n	8000d58 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	485e      	ldr	r0, [pc, #376]	; (8000ee8 <W25qxx_Init+0x1a0>)
 8000d6e:	f000 fddd 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000d72:	2064      	movs	r0, #100	; 0x64
 8000d74:	f000 fb4e 	bl	8001414 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8000d78:	f7ff fef4 	bl	8000b64 <W25qxx_ReadID>
 8000d7c:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3b11      	subs	r3, #17
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d86c      	bhi.n	8000e62 <W25qxx_Init+0x11a>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <W25qxx_Init+0x48>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000e55 	.word	0x08000e55
 8000d94:	08000e47 	.word	0x08000e47
 8000d98:	08000e39 	.word	0x08000e39
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e1d 	.word	0x08000e1d
 8000da4:	08000e0f 	.word	0x08000e0f
 8000da8:	08000e01 	.word	0x08000e01
 8000dac:	08000df1 	.word	0x08000df1
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000e63 	.word	0x08000e63
 8000db8:	08000e63 	.word	0x08000e63
 8000dbc:	08000e63 	.word	0x08000e63
 8000dc0:	08000e63 	.word	0x08000e63
 8000dc4:	08000e63 	.word	0x08000e63
 8000dc8:	08000e63 	.word	0x08000e63
 8000dcc:	08000dd1 	.word	0x08000dd1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ddc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8000dde:	e046      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8000de0:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000de2:	2209      	movs	r2, #9
 8000de4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8000de6:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8000dee:	e03e      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000df2:	2208      	movs	r2, #8
 8000df4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8000dfe:	e036      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8000e0c:	e02f      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8000e14:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8000e1a:	e028      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e1e:	2205      	movs	r2, #5
 8000e20:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e24:	2220      	movs	r2, #32
 8000e26:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8000e28:	e021      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8000e36:	e01a      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8000e44:	e013      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8000e52:	e00c      	b.n	8000e6e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8000e60:	e005      	b.n	8000e6e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e036      	b.n	8000edc <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e74:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e86:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e8e:	6912      	ldr	r2, [r2, #16]
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e96:	8952      	ldrh	r2, [r2, #10]
 8000e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000e9e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000ea8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000eb0:	6912      	ldr	r2, [r2, #16]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	0a9b      	lsrs	r3, r3, #10
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000eba:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000ebc:	f7ff fe88 	bl	8000bd0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fed1 	bl	8000c68 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fece 	bl	8000c68 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f7ff fecb 	bl	8000c68 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <W25qxx_Init+0x19c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20006568 	.word	0x20006568
 8000ee8:	40010800 	.word	0x40010800

08000eec <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 8000ef0:	e002      	b.n	8000ef8 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fa8e 	bl	8001414 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <W25qxx_EraseChip+0x54>)
 8000efa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d0f7      	beq.n	8000ef2 <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <W25qxx_EraseChip+0x54>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 8000f0a:	f7ff fe97 	bl	8000c3c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2110      	movs	r1, #16
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <W25qxx_EraseChip+0x58>)
 8000f14:	f000 fd0a 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8000f18:	20c7      	movs	r0, #199	; 0xc7
 8000f1a:	f7ff fe0d 	bl	8000b38 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2110      	movs	r1, #16
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <W25qxx_EraseChip+0x58>)
 8000f24:	f000 fd02 	bl	800192c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000f28:	f7ff fee4 	bl	8000cf4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 fa71 	bl	8001414 <HAL_Delay>
	w25qxx.Lock = 0;
 8000f32:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <W25qxx_EraseChip+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20006568 	.word	0x20006568
 8000f44:	40010800 	.word	0x40010800

08000f48 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <W25qxx_SectorToPage+0x24>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <W25qxx_SectorToPage+0x24>)
 8000f5c:	8952      	ldrh	r2, [r2, #10]
 8000f5e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20006568 	.word	0x20006568

08000f70 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8000f7e:	e002      	b.n	8000f86 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f000 fa47 	bl	8001414 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000f88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d0f7      	beq.n	8000f80 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000f9a:	895b      	ldrh	r3, [r3, #10]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d802      	bhi.n	8000faa <W25qxx_ReadPage+0x3a>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000fac:	895b      	ldrh	r3, [r3, #10]
 8000fae:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000fb8:	8952      	ldrh	r2, [r2, #10]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d905      	bls.n	8000fca <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000fc0:	895b      	ldrh	r3, [r3, #10]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000fcc:	895b      	ldrh	r3, [r3, #10]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <W25qxx_ReadPage+0xf4>)
 8000fe2:	f000 fca3 	bl	800192c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d909      	bls.n	8001002 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f7ff fda2 	bl	8000b38 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	0e1b      	lsrs	r3, r3, #24
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fd9c 	bl	8000b38 <W25qxx_Spi>
 8001000:	e002      	b.n	8001008 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001002:	200b      	movs	r0, #11
 8001004:	f7ff fd98 	bl	8000b38 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	0c1b      	lsrs	r3, r3, #16
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd92 	bl	8000b38 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fd8c 	bl	8000b38 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fd87 	bl	8000b38 <W25qxx_Spi>
	W25qxx_Spi(0);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fd84 	bl	8000b38 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b29a      	uxth	r2, r3
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <W25qxx_ReadPage+0xf8>)
 800103a:	f001 fa75 	bl	8002528 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <W25qxx_ReadPage+0xf4>)
 8001044:	f000 fc72 	bl	800192c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f000 f9e3 	bl	8001414 <HAL_Delay>
	w25qxx.Lock = 0;
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <W25qxx_ReadPage+0xf0>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20006568 	.word	0x20006568
 8001064:	40010800 	.word	0x40010800
 8001068:	2000008c 	.word	0x2000008c

0800106c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <W25qxx_ReadSector+0xc0>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d802      	bhi.n	800108a <W25qxx_ReadSector+0x1e>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <W25qxx_ReadSector+0xc0>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <W25qxx_ReadSector+0xc0>)
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d243      	bcs.n	8001122 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	441a      	add	r2, r3
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <W25qxx_ReadSector+0xc0>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d905      	bls.n	80010b4 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <W25qxx_ReadSector+0xc0>)
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	e001      	b.n	80010b8 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f7ff ff45 	bl	8000f48 <W25qxx_SectorToPage>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <W25qxx_ReadSector+0xc0>)
 80010c2:	895b      	ldrh	r3, [r3, #10]
 80010c4:	4619      	mov	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80010cc:	4413      	add	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <W25qxx_ReadSector+0xc0>)
 80010d2:	895b      	ldrh	r3, [r3, #10]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80010dc:	fb01 f202 	mul.w	r2, r1, r2
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	69f9      	ldr	r1, [r7, #28]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff ff40 	bl	8000f70 <W25qxx_ReadPage>
		StartPage++;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	3301      	adds	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <W25qxx_ReadSector+0xc0>)
 80010f8:	895b      	ldrh	r3, [r3, #10]
 80010fa:	461a      	mov	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	1a9a      	subs	r2, r3, r2
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	4413      	add	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <W25qxx_ReadSector+0xc0>)
 8001108:	895b      	ldrh	r3, [r3, #10]
 800110a:	461a      	mov	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dce1      	bgt.n	80010e4 <W25qxx_ReadSector+0x78>
 8001120:	e000      	b.n	8001124 <W25qxx_ReadSector+0xb8>
		return;
 8001122:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20006568 	.word	0x20006568

08001130 <W25qxx_Read>:

	spistruct.LastDataSize = NumByteToWrite;
	spistruct.writtenDataByte = NumByteToWrite + spistruct.writtenDataByte;
}

void W25qxx_Read(uint32_t i){
 8001130:	b580      	push	{r7, lr}
 8001132:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001136:	af00      	add	r7, sp, #0
 8001138:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800113c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001140:	6018      	str	r0, [r3, #0]
	if(spistruct.allDataRead == 0){
 8001142:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001144:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80c9 	beq.w	80012e6 <W25qxx_Read+0x1b6>
		uint8_t buffer[1024],*ret = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		uint32_t findWord = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		uint16_t sendBufferOffset = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		W25qxx_ReadSector(buffer, spistruct.sectorNumberforRead, spistruct.readOffset, 1024);
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001168:	69d9      	ldr	r1, [r3, #28]
 800116a:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <W25qxx_Read+0x1c0>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	f107 000c 	add.w	r0, r7, #12
 8001172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001176:	f7ff ff79 	bl	800106c <W25qxx_ReadSector>
		ret = strstr(buffer,"\r\n");
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	495d      	ldr	r1, [pc, #372]	; (80012f4 <W25qxx_Read+0x1c4>)
 8001180:	4618      	mov	r0, r3
 8001182:	f001 ff75 	bl	8003070 <strstr>
 8001186:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		if(ret == 0 && 4096-spistruct.readOffset > 1024){
 800118a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800118e:	2b00      	cmp	r3, #0
 8001190:	d122      	bne.n	80011d8 <W25qxx_Read+0xa8>
 8001192:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119e:	d91b      	bls.n	80011d8 <W25qxx_Read+0xa8>
			printmsg("%d--> data yok \r\n",i,spistruct.sendBuffer);
 80011a0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80011a4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80011a8:	4a53      	ldr	r2, [pc, #332]	; (80012f8 <W25qxx_Read+0x1c8>)
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	4853      	ldr	r0, [pc, #332]	; (80012fc <W25qxx_Read+0x1cc>)
 80011ae:	f7ff fb53 	bl	8000858 <printmsg>
			spistruct.allDataRead = 1;
 80011b2:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
			spistruct.sectorNumberforRead = 0;
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
			spistruct.readOffset = 0;
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
			spistruct.sectorNumberforWrite = 0;
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
			spistruct.writeOffset = 0;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
			W25qxx_EraseChip();
 80011d2:	f7ff fe8b 	bl	8000eec <W25qxx_EraseChip>
		if(ret == 0 && 4096-spistruct.readOffset > 1024){
 80011d6:	e06d      	b.n	80012b4 <W25qxx_Read+0x184>

		}
		else if(ret == 0){
 80011d8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d152      	bne.n	8001286 <W25qxx_Read+0x156>
			memcpy(&spistruct.sendBuffer[sendBufferOffset],&buffer,(4096-spistruct.readOffset));
 80011e0:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80011e4:	3320      	adds	r3, #32
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011e8:	1898      	adds	r0, r3, r2
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	4619      	mov	r1, r3
 80011f8:	f001 ff24 	bl	8003044 <memcpy>
			sendBufferOffset = 4096-spistruct.readOffset;
 80011fc:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <W25qxx_Read+0x1c0>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001206:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
			spistruct.sectorNumberforRead++;
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <W25qxx_Read+0x1c0>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	3301      	adds	r3, #1
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001212:	61d3      	str	r3, [r2, #28]
			spistruct.readOffset = 0;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
			if(sendBufferOffset != 0){
 800121a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800121e:	2b00      	cmp	r3, #0
 8001220:	d048      	beq.n	80012b4 <W25qxx_Read+0x184>
				W25qxx_ReadSector(buffer, spistruct.sectorNumberforRead, spistruct.readOffset, 1024);
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001224:	69d9      	ldr	r1, [r3, #28]
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	f107 000c 	add.w	r0, r7, #12
 800122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001232:	f7ff ff1b 	bl	800106c <W25qxx_ReadSector>
				ret = strstr(buffer,"\r\n");
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <W25qxx_Read+0x1c4>)
 800123c:	4618      	mov	r0, r3
 800123e:	f001 ff17 	bl	8003070 <strstr>
 8001242:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
				if(ret != 0){
 8001246:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800124a:	2b00      	cmp	r3, #0
 800124c:	d032      	beq.n	80012b4 <W25qxx_Read+0x184>
					findWord = ret - buffer + 2;
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	3302      	adds	r3, #2
 800125a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
					memcpy(&spistruct.sendBuffer[sendBufferOffset],&buffer,findWord*sizeof(uint8_t));
 800125e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001262:	3320      	adds	r3, #32
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001266:	4413      	add	r3, r2
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fee7 	bl	8003044 <memcpy>
					spistruct.readOffset = findWord + spistruct.readOffset;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800127e:	4413      	add	r3, r2
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <W25qxx_Read+0x1c0>)
 8001282:	60d3      	str	r3, [r2, #12]
 8001284:	e016      	b.n	80012b4 <W25qxx_Read+0x184>
				}
			}
		}else{
			findWord = ret - buffer + 2;
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	3302      	adds	r3, #2
 8001292:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			memcpy(spistruct.sendBuffer,&buffer,findWord*sizeof(uint8_t));
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800129e:	4619      	mov	r1, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <W25qxx_Read+0x1c8>)
 80012a2:	f001 fecf 	bl	8003044 <memcpy>
			spistruct.readOffset = findWord + spistruct.readOffset;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <W25qxx_Read+0x1c0>)
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80012ae:	4413      	add	r3, r2
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <W25qxx_Read+0x1c0>)
 80012b2:	60d3      	str	r3, [r2, #12]
		}
		printmsg("%ld-->%s-->%ld\r\n",i,spistruct.sendBuffer,spistruct.sectorNumberforRead);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <W25qxx_Read+0x1c0>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80012bc:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <W25qxx_Read+0x1c8>)
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <W25qxx_Read+0x1d0>)
 80012c6:	f7ff fac7 	bl	8000858 <printmsg>
		memset(spistruct.sendBuffer,0,sizeof(spistruct.sendBuffer));
 80012ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ce:	2100      	movs	r1, #0
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <W25qxx_Read+0x1c8>)
 80012d2:	f001 fec5 	bl	8003060 <memset>
		memset(buffer , 0 , sizeof(buffer));
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 febd 	bl	8003060 <memset>
	}
}
 80012e6:	bf00      	nop
 80012e8:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20006144 	.word	0x20006144
 80012f4:	08003998 	.word	0x08003998
 80012f8:	20006164 	.word	0x20006164
 80012fc:	0800399c 	.word	0x0800399c
 8001300:	080039b0 	.word	0x080039b0

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff fbff 	bl	8000b2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800132e:	f001 fe65 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff f903 	bl	800053c <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001340:	08003a40 	.word	0x08003a40
  ldr r2, =_sbss
 8001344:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001348:	200065a4 	.word	0x200065a4

0800134c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f92b 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff faaa 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f935 	bl	800160a <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b8:	f000 f90b 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20006590 	.word	0x20006590

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20006590 	.word	0x20006590

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fff0 	bl	8001400 <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffe0 	bl	8001400 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff49 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff5e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffb0 	bl	8001578 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e169      	b.n	800190c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001638:	2201      	movs	r2, #1
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8158 	bne.w	8001906 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a9a      	ldr	r2, [pc, #616]	; (80018c4 <HAL_GPIO_Init+0x2a0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d05e      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001660:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <HAL_GPIO_Init+0x2a0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d875      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001666:	4a98      	ldr	r2, [pc, #608]	; (80018c8 <HAL_GPIO_Init+0x2a4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d058      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 800166c:	4a96      	ldr	r2, [pc, #600]	; (80018c8 <HAL_GPIO_Init+0x2a4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d86f      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001672:	4a96      	ldr	r2, [pc, #600]	; (80018cc <HAL_GPIO_Init+0x2a8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d052      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001678:	4a94      	ldr	r2, [pc, #592]	; (80018cc <HAL_GPIO_Init+0x2a8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d869      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800167e:	4a94      	ldr	r2, [pc, #592]	; (80018d0 <HAL_GPIO_Init+0x2ac>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d04c      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001684:	4a92      	ldr	r2, [pc, #584]	; (80018d0 <HAL_GPIO_Init+0x2ac>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d863      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800168a:	4a92      	ldr	r2, [pc, #584]	; (80018d4 <HAL_GPIO_Init+0x2b0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d046      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001690:	4a90      	ldr	r2, [pc, #576]	; (80018d4 <HAL_GPIO_Init+0x2b0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d85d      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d82a      	bhi.n	80016f0 <HAL_GPIO_Init+0xcc>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d859      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <HAL_GPIO_Init+0x80>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	080016f9 	.word	0x080016f9
 80016ac:	0800170b 	.word	0x0800170b
 80016b0:	0800174d 	.word	0x0800174d
 80016b4:	08001753 	.word	0x08001753
 80016b8:	08001753 	.word	0x08001753
 80016bc:	08001753 	.word	0x08001753
 80016c0:	08001753 	.word	0x08001753
 80016c4:	08001753 	.word	0x08001753
 80016c8:	08001753 	.word	0x08001753
 80016cc:	08001753 	.word	0x08001753
 80016d0:	08001753 	.word	0x08001753
 80016d4:	08001753 	.word	0x08001753
 80016d8:	08001753 	.word	0x08001753
 80016dc:	08001753 	.word	0x08001753
 80016e0:	08001753 	.word	0x08001753
 80016e4:	08001753 	.word	0x08001753
 80016e8:	08001701 	.word	0x08001701
 80016ec:	08001715 	.word	0x08001715
 80016f0:	4a79      	ldr	r2, [pc, #484]	; (80018d8 <HAL_GPIO_Init+0x2b4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016f6:	e02c      	b.n	8001752 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e029      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	3304      	adds	r3, #4
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e024      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	3308      	adds	r3, #8
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e01f      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	330c      	adds	r3, #12
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e01a      	b.n	8001754 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001726:	2304      	movs	r3, #4
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e013      	b.n	8001754 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	611a      	str	r2, [r3, #16]
          break;
 800173e:	e009      	b.n	8001754 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	615a      	str	r2, [r3, #20]
          break;
 800174a:	e003      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x130>
          break;
 8001752:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d801      	bhi.n	800175e <HAL_GPIO_Init+0x13a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_Init+0x13e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d802      	bhi.n	8001770 <HAL_GPIO_Init+0x14c>
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x152>
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	3b08      	subs	r3, #8
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	210f      	movs	r1, #15
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	6a39      	ldr	r1, [r7, #32]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80b1 	beq.w	8001906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a4:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x2b8>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <HAL_GPIO_Init+0x2b8>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <HAL_GPIO_Init+0x2b8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017bc:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2bc>)
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a40      	ldr	r2, [pc, #256]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_GPIO_Init+0x1ec>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1e8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3e      	ldr	r2, [pc, #248]	; (80018ec <HAL_GPIO_Init+0x2c8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1e4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <HAL_GPIO_Init+0x2cc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1e0>
 8001800:	2303      	movs	r3, #3
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001804:	2304      	movs	r3, #4
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001810:	2300      	movs	r3, #0
 8001812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001822:	492f      	ldr	r1, [pc, #188]	; (80018e0 <HAL_GPIO_Init+0x2bc>)
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	492c      	ldr	r1, [pc, #176]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	4928      	ldr	r1, [pc, #160]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001854:	4013      	ands	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4922      	ldr	r1, [pc, #136]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	491e      	ldr	r1, [pc, #120]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800187c:	4013      	ands	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	4918      	ldr	r1, [pc, #96]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4914      	ldr	r1, [pc, #80]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d021      	beq.n	80018f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
 80018c0:	e021      	b.n	8001906 <HAL_GPIO_Init+0x2e2>
 80018c2:	bf00      	nop
 80018c4:	10320000 	.word	0x10320000
 80018c8:	10310000 	.word	0x10310000
 80018cc:	10220000 	.word	0x10220000
 80018d0:	10210000 	.word	0x10210000
 80018d4:	10120000 	.word	0x10120000
 80018d8:	10110000 	.word	0x10110000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40011400 	.word	0x40011400
 80018f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_GPIO_Init+0x304>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	43db      	mvns	r3, r3
 8001900:	4909      	ldr	r1, [pc, #36]	; (8001928 <HAL_GPIO_Init+0x304>)
 8001902:	4013      	ands	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f ae8e 	bne.w	8001638 <HAL_GPIO_Init+0x14>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	372c      	adds	r7, #44	; 0x2c
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e304      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d00c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001988:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d112      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x12c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d168      	bne.n	8001a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e2de      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x76>
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a77      	ldr	r2, [pc, #476]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 80019fe:	4b72      	ldr	r3, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a71      	ldr	r2, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fce2 	bl	8001400 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fcde 	bl	8001400 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e292      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe4>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fcce 	bl	8001400 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fcca 	bl	8001400 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e27e      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x10c>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e252      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4939      	ldr	r1, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fc83 	bl	8001400 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fc7f 	bl	8001400 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e233      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc62 	bl	8001400 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fc5e 	bl	8001400 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e212      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03a      	beq.n	8001be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fc42 	bl	8001400 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc3e 	bl	8001400 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1f2      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 fc20 	bl	80023e4 <RCC_Delay>
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fc28 	bl	8001400 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc24 	bl	8001400 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d8      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	42420000 	.word	0x42420000
 8001bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b9b      	ldr	r3, [pc, #620]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a6 	beq.w	8001d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4ec>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x4ec>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x4ec>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fbe5 	bl	8001400 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff fbe1 	bl	8001400 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e195      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x312>
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x334>
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a72      	ldr	r2, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	e01c      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x356>
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001cb2:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fb95 	bl	8001400 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fb91 	bl	8001400 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e143      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCC_OscConfig+0x37e>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb7f 	bl	8001400 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb7b 	bl	8001400 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e12d      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 808c 	beq.w	8001e5c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e103      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d14e      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0ef      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x4f0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb2f 	bl	8001400 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001da6:	f7ff fb2b 	bl	8001400 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0df      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	491c      	ldr	r1, [pc, #112]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4918      	ldr	r1, [pc, #96]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x4f0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fb07 	bl	8001400 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001df6:	f7ff fb03 	bl	8001400 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0b7      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x49a>
 8001e14:	e022      	b.n	8001e5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x4e8>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_OscConfig+0x4f0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff faea 	bl	8001400 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001e2e:	e00f      	b.n	8001e50 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001e30:	f7ff fae6 	bl	8001400 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d908      	bls.n	8001e50 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e09a      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e9      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8088 	beq.w	8001f76 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d068      	beq.n	8001f44 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d14d      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_OscConfig+0x628>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fabe 	bl	8001400 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff faba 	bl	8001400 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e06e      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eae:	d10f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4931      	ldr	r1, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	f023 020f 	bic.w	r2, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	4927      	ldr	r1, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x628>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff fa87 	bl	8001400 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fa83 	bl	8001400 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e037      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x59a>
 8001f14:	e02f      	b.n	8001f76 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x628>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fa70 	bl	8001400 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fa6c 	bl	8001400 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e020      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c8>
 8001f42:	e018      	b.n	8001f76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e013      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x624>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	42420060 	.word	0x42420060

08001f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff f9c2 	bl	8001400 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f9be 	bl	8001400 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f920 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	080039e4 	.word	0x080039e4
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002160:	b09d      	sub	sp, #116	; 0x74
 8002162:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_GetSysClockFreq+0x210>)
 8002166:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	c407      	stmia	r4!, {r0, r1, r2}
 800216e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002170:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_RCC_GetSysClockFreq+0x214>)
 8002172:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	667b      	str	r3, [r7, #100]	; 0x64
 8002180:	2300      	movs	r3, #0
 8002182:	663b      	str	r3, [r7, #96]	; 0x60
 8002184:	2300      	movs	r3, #0
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002188:	2300      	movs	r3, #0
 800218a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	65bb      	str	r3, [r7, #88]	; 0x58
 8002194:	2300      	movs	r3, #0
 8002196:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002198:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_GetSysClockFreq+0x218>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800219e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d002      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x52>
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d003      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x58>
 80021ac:	e0d4      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_GetSysClockFreq+0x21c>)
 80021b0:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80021b2:	e0d4      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b6:	0c9b      	lsrs	r3, r3, #18
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	3340      	adds	r3, #64	; 0x40
 80021be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021c2:	4413      	add	r3, r2
 80021c4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80021c8:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b9 	beq.w	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_GetSysClockFreq+0x218>)
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3340      	adds	r3, #64	; 0x40
 80021e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021e4:	4413      	add	r3, r2
 80021e6:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80021ea:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_GetSysClockFreq+0x218>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8095 	beq.w	8002324 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80021fa:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_RCC_GetSysClockFreq+0x218>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	3301      	adds	r3, #1
 8002206:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002208:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HAL_RCC_GetSysClockFreq+0x218>)
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3302      	adds	r3, #2
 8002214:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002218:	2200      	movs	r2, #0
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	61fa      	str	r2, [r7, #28]
 800221e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002220:	2200      	movs	r2, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
 8002224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002226:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800222a:	4622      	mov	r2, r4
 800222c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002230:	4684      	mov	ip, r0
 8002232:	fb0c f202 	mul.w	r2, ip, r2
 8002236:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800223a:	468c      	mov	ip, r1
 800223c:	4618      	mov	r0, r3
 800223e:	4621      	mov	r1, r4
 8002240:	4603      	mov	r3, r0
 8002242:	fb03 f30c 	mul.w	r3, r3, ip
 8002246:	4413      	add	r3, r2
 8002248:	4602      	mov	r2, r0
 800224a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224c:	fba2 8901 	umull	r8, r9, r2, r1
 8002250:	444b      	add	r3, r9
 8002252:	4699      	mov	r9, r3
 8002254:	4642      	mov	r2, r8
 8002256:	464b      	mov	r3, r9
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	0159      	lsls	r1, r3, #5
 8002262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002266:	0150      	lsls	r0, r2, #5
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	ebb2 0508 	subs.w	r5, r2, r8
 8002270:	eb63 0609 	sbc.w	r6, r3, r9
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	01b3      	lsls	r3, r6, #6
 800227e:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8002282:	01aa      	lsls	r2, r5, #6
 8002284:	ebb2 0a05 	subs.w	sl, r2, r5
 8002288:	eb63 0b06 	sbc.w	fp, r3, r6
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800229c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a0:	4692      	mov	sl, r2
 80022a2:	469b      	mov	fp, r3
 80022a4:	eb1a 0308 	adds.w	r3, sl, r8
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	eb4b 0309 	adc.w	r3, fp, r9
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022bc:	4629      	mov	r1, r5
 80022be:	024b      	lsls	r3, r1, #9
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	4604      	mov	r4, r0
 80022c6:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80022ca:	4601      	mov	r1, r0
 80022cc:	024a      	lsls	r2, r1, #9
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d4:	2200      	movs	r2, #0
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	617a      	str	r2, [r7, #20]
 80022da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022dc:	2200      	movs	r2, #0
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	60fa      	str	r2, [r7, #12]
 80022e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022e6:	4622      	mov	r2, r4
 80022e8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80022ec:	4645      	mov	r5, r8
 80022ee:	fb05 f202 	mul.w	r2, r5, r2
 80022f2:	464e      	mov	r6, r9
 80022f4:	4625      	mov	r5, r4
 80022f6:	461c      	mov	r4, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	fb03 f306 	mul.w	r3, r3, r6
 80022fe:	4413      	add	r3, r2
 8002300:	4622      	mov	r2, r4
 8002302:	4644      	mov	r4, r8
 8002304:	fba2 2404 	umull	r2, r4, r2, r4
 8002308:	627c      	str	r4, [r7, #36]	; 0x24
 800230a:	623a      	str	r2, [r7, #32]
 800230c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230e:	4413      	add	r3, r2
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002316:	f7fd ff8d 	bl	8000234 <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4613      	mov	r3, r2
 8002320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002322:	e007      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_RCC_GetSysClockFreq+0x21c>)
 8002328:	fb03 f202 	mul.w	r2, r3, r2
 800232c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002334:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002338:	461a      	mov	r2, r3
 800233a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8002340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002346:	e004      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_RCC_GetSysClockFreq+0x220>)
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8002352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_RCC_GetSysClockFreq+0x21c>)
 800235a:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8002360:	4618      	mov	r0, r3
 8002362:	3774      	adds	r7, #116	; 0x74
 8002364:	46bd      	mov	sp, r7
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236a:	bf00      	nop
 800236c:	080039c4 	.word	0x080039c4
 8002370:	080039d4 	.word	0x080039d4
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	003d0900 	.word	0x003d0900

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	080039f4 	.word	0x080039f4

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffde 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080039f4 	.word	0x080039f4

080023e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <RCC_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <RCC_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <RCC_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000000 	.word	0x20000000
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e076      	b.n	8002520 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002442:	d009      	beq.n	8002458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
 800244a:	e005      	b.n	8002458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fa58 	bl	8000928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	0c1a      	lsrs	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f002 0204 	and.w	r2, r2, #4
 80024fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002544:	d112      	bne.n	800256c <HAL_SPI_Receive+0x44>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10e      	bne.n	800256c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2204      	movs	r2, #4
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f8f1 	bl	800274a <HAL_SPI_TransmitReceive>
 8002568:	4603      	mov	r3, r0
 800256a:	e0ea      	b.n	8002742 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_SPI_Receive+0x52>
 8002576:	2302      	movs	r3, #2
 8002578:	e0e3      	b.n	8002742 <HAL_SPI_Receive+0x21a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002582:	f7fe ff3d 	bl	8001400 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002598:	e0ca      	b.n	8002730 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_Receive+0x7e>
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025aa:	e0c1      	b.n	8002730 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2204      	movs	r2, #4
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f2:	d10f      	bne.n	8002614 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d007      	beq.n	8002632 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d162      	bne.n	8002700 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800263a:	e02e      	b.n	800269a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d115      	bne.n	8002676 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f103 020c 	add.w	r2, r3, #12
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002674:	e011      	b.n	800269a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002676:	f7fe fec3 	bl	8001400 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d803      	bhi.n	800268e <HAL_SPI_Receive+0x166>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d102      	bne.n	8002694 <HAL_SPI_Receive+0x16c>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002698:	e04a      	b.n	8002730 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1cb      	bne.n	800263c <HAL_SPI_Receive+0x114>
 80026a4:	e031      	b.n	800270a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d113      	bne.n	80026dc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026da:	e011      	b.n	8002700 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026dc:	f7fe fe90 	bl	8001400 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d803      	bhi.n	80026f4 <HAL_SPI_Receive+0x1cc>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Receive+0x1d2>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026fe:	e017      	b.n	8002730 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1cd      	bne.n	80026a6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa46 	bl	8002ba0 <SPI_EndRxTransaction>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
 800272c:	e000      	b.n	8002730 <HAL_SPI_Receive+0x208>
  }

error :
 800272e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08c      	sub	sp, #48	; 0x30
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x26>
 800276c:	2302      	movs	r3, #2
 800276e:	e18a      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x33c>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002778:	f7fe fe42 	bl	8001400 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00f      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a0:	d107      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
 80027aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b8:	e15b      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d2:	e14e      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d003      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2205      	movs	r2, #5
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d007      	beq.n	800283c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d178      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x10a>
 800284e:	8b7b      	ldrh	r3, [r7, #26]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d166      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002878:	e053      	b.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11b      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d113      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d014      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002902:	f7fe fd7d 	bl	8001400 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	429a      	cmp	r2, r3
 8002910:	d807      	bhi.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002918:	d003      	beq.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002920:	e0a7      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1a6      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1a1      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 8002936:	e07c      	b.n	8002a32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x1fc>
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d16b      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	e057      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d11c      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d114      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2ae>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029f8:	f7fe fd02 	bl	8001400 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x2c6>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x2cc>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a1c:	e029      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1a2      	bne.n	800296e <HAL_SPI_TransmitReceive+0x224>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d19d      	bne.n	800296e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f904 	bl	8002c44 <SPI_EndRxTxTransaction>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a4e:	e010      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	e000      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa0:	f7fe fcae 	bl	8001400 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab0:	f7fe fca6 	bl	8001400 <HAL_GetTick>
 8002ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	0d1b      	lsrs	r3, r3, #20
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	e054      	b.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ace:	d050      	beq.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad0:	f7fe fc96 	bl	8001400 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d902      	bls.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d13d      	bne.n	8002b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afe:	d111      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	d004      	beq.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d107      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d10f      	bne.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e017      	b.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d19b      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb4:	d111      	bne.n	8002bda <SPI_EndRxTransaction+0x3a>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbe:	d004      	beq.n	8002bca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc8:	d107      	bne.n	8002bda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be2:	d117      	bne.n	8002c14 <SPI_EndRxTransaction+0x74>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d112      	bne.n	8002c14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ff49 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01a      	beq.n	8002c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e013      	b.n	8002c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ff36 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e000      	b.n	8002c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff ff18 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e000      	b.n	8002c78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e03f      	b.n	8002d12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fd fe88 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f905 	bl	8002ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08a      	sub	sp, #40	; 0x28
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d17c      	bne.n	8002e34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_Transmit+0x2c>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e075      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Transmit+0x3e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e06e      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fb47 	bl	8001400 <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x82>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dac:	e02a      	b.n	8002e04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f840 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e036      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ddc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3302      	adds	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e007      	b.n	8002df6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1cf      	bne.n	8002dae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	; 0x40
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f810 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4e:	e02c      	b.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e56:	d028      	beq.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	f7fe facf 	bl	8001400 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d21d      	bcs.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e00f      	b.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d0c3      	beq.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f0e:	f023 030c 	bic.w	r3, r3, #12
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <UART_SetConfig+0x114>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7ff fa3e 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	e002      	b.n	8002f4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff fa26 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8002f48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <UART_SetConfig+0x118>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	0119      	lsls	r1, r3, #4
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <UART_SetConfig+0x118>)
 8002f82:	fba3 0302 	umull	r0, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2064      	movs	r0, #100	; 0x64
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <UART_SetConfig+0x118>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa0:	4419      	add	r1, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <UART_SetConfig+0x118>)
 8002fba:	fba3 0302 	umull	r0, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2064      	movs	r0, #100	; 0x64
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <UART_SetConfig+0x118>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	440a      	add	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <__errno>:
 8002ff0:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <__errno+0x8>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	2600      	movs	r6, #0
 8003000:	4d0c      	ldr	r5, [pc, #48]	; (8003034 <__libc_init_array+0x38>)
 8003002:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	f000 fcb2 	bl	8003974 <_init>
 8003010:	2600      	movs	r6, #0
 8003012:	4d0a      	ldr	r5, [pc, #40]	; (800303c <__libc_init_array+0x40>)
 8003014:	4c0a      	ldr	r4, [pc, #40]	; (8003040 <__libc_init_array+0x44>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08003a38 	.word	0x08003a38
 8003038:	08003a38 	.word	0x08003a38
 800303c:	08003a38 	.word	0x08003a38
 8003040:	08003a3c 	.word	0x08003a3c

08003044 <memcpy>:
 8003044:	440a      	add	r2, r1
 8003046:	4291      	cmp	r1, r2
 8003048:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800304c:	d100      	bne.n	8003050 <memcpy+0xc>
 800304e:	4770      	bx	lr
 8003050:	b510      	push	{r4, lr}
 8003052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003056:	4291      	cmp	r1, r2
 8003058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800305c:	d1f9      	bne.n	8003052 <memcpy+0xe>
 800305e:	bd10      	pop	{r4, pc}

08003060 <memset>:
 8003060:	4603      	mov	r3, r0
 8003062:	4402      	add	r2, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	f803 1b01 	strb.w	r1, [r3], #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <strstr>:
 8003070:	780a      	ldrb	r2, [r1, #0]
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	b96a      	cbnz	r2, 8003092 <strstr+0x22>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	429a      	cmp	r2, r3
 800307a:	d109      	bne.n	8003090 <strstr+0x20>
 800307c:	460c      	mov	r4, r1
 800307e:	4605      	mov	r5, r0
 8003080:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f6      	beq.n	8003076 <strstr+0x6>
 8003088:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800308c:	429e      	cmp	r6, r3
 800308e:	d0f7      	beq.n	8003080 <strstr+0x10>
 8003090:	3001      	adds	r0, #1
 8003092:	7803      	ldrb	r3, [r0, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <strstr+0x8>
 8003098:	4618      	mov	r0, r3
 800309a:	e7ec      	b.n	8003076 <strstr+0x6>

0800309c <_vsiprintf_r>:
 800309c:	b500      	push	{lr}
 800309e:	b09b      	sub	sp, #108	; 0x6c
 80030a0:	9100      	str	r1, [sp, #0]
 80030a2:	9104      	str	r1, [sp, #16]
 80030a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030a8:	9105      	str	r1, [sp, #20]
 80030aa:	9102      	str	r1, [sp, #8]
 80030ac:	4905      	ldr	r1, [pc, #20]	; (80030c4 <_vsiprintf_r+0x28>)
 80030ae:	9103      	str	r1, [sp, #12]
 80030b0:	4669      	mov	r1, sp
 80030b2:	f000 f86f 	bl	8003194 <_svfiprintf_r>
 80030b6:	2200      	movs	r2, #0
 80030b8:	9b00      	ldr	r3, [sp, #0]
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	b01b      	add	sp, #108	; 0x6c
 80030be:	f85d fb04 	ldr.w	pc, [sp], #4
 80030c2:	bf00      	nop
 80030c4:	ffff0208 	.word	0xffff0208

080030c8 <vsiprintf>:
 80030c8:	4613      	mov	r3, r2
 80030ca:	460a      	mov	r2, r1
 80030cc:	4601      	mov	r1, r0
 80030ce:	4802      	ldr	r0, [pc, #8]	; (80030d8 <vsiprintf+0x10>)
 80030d0:	6800      	ldr	r0, [r0, #0]
 80030d2:	f7ff bfe3 	b.w	800309c <_vsiprintf_r>
 80030d6:	bf00      	nop
 80030d8:	2000000c 	.word	0x2000000c

080030dc <__ssputs_r>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	688e      	ldr	r6, [r1, #8]
 80030e2:	4682      	mov	sl, r0
 80030e4:	429e      	cmp	r6, r3
 80030e6:	460c      	mov	r4, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	461f      	mov	r7, r3
 80030ec:	d838      	bhi.n	8003160 <__ssputs_r+0x84>
 80030ee:	898a      	ldrh	r2, [r1, #12]
 80030f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f4:	d032      	beq.n	800315c <__ssputs_r+0x80>
 80030f6:	6825      	ldr	r5, [r4, #0]
 80030f8:	6909      	ldr	r1, [r1, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	eba5 0901 	sub.w	r9, r5, r1
 8003100:	6965      	ldr	r5, [r4, #20]
 8003102:	444b      	add	r3, r9
 8003104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800310c:	106d      	asrs	r5, r5, #1
 800310e:	429d      	cmp	r5, r3
 8003110:	bf38      	it	cc
 8003112:	461d      	movcc	r5, r3
 8003114:	0553      	lsls	r3, r2, #21
 8003116:	d531      	bpl.n	800317c <__ssputs_r+0xa0>
 8003118:	4629      	mov	r1, r5
 800311a:	f000 fb61 	bl	80037e0 <_malloc_r>
 800311e:	4606      	mov	r6, r0
 8003120:	b950      	cbnz	r0, 8003138 <__ssputs_r+0x5c>
 8003122:	230c      	movs	r3, #12
 8003124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003128:	f8ca 3000 	str.w	r3, [sl]
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003138:	464a      	mov	r2, r9
 800313a:	6921      	ldr	r1, [r4, #16]
 800313c:	f7ff ff82 	bl	8003044 <memcpy>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	6126      	str	r6, [r4, #16]
 800314e:	444e      	add	r6, r9
 8003150:	6026      	str	r6, [r4, #0]
 8003152:	463e      	mov	r6, r7
 8003154:	6165      	str	r5, [r4, #20]
 8003156:	eba5 0509 	sub.w	r5, r5, r9
 800315a:	60a5      	str	r5, [r4, #8]
 800315c:	42be      	cmp	r6, r7
 800315e:	d900      	bls.n	8003162 <__ssputs_r+0x86>
 8003160:	463e      	mov	r6, r7
 8003162:	4632      	mov	r2, r6
 8003164:	4641      	mov	r1, r8
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	f000 fab8 	bl	80036dc <memmove>
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	2000      	movs	r0, #0
 8003170:	1b9b      	subs	r3, r3, r6
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	4433      	add	r3, r6
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	e7db      	b.n	8003134 <__ssputs_r+0x58>
 800317c:	462a      	mov	r2, r5
 800317e:	f000 fba3 	bl	80038c8 <_realloc_r>
 8003182:	4606      	mov	r6, r0
 8003184:	2800      	cmp	r0, #0
 8003186:	d1e1      	bne.n	800314c <__ssputs_r+0x70>
 8003188:	4650      	mov	r0, sl
 800318a:	6921      	ldr	r1, [r4, #16]
 800318c:	f000 fac0 	bl	8003710 <_free_r>
 8003190:	e7c7      	b.n	8003122 <__ssputs_r+0x46>
	...

08003194 <_svfiprintf_r>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	4698      	mov	r8, r3
 800319a:	898b      	ldrh	r3, [r1, #12]
 800319c:	4607      	mov	r7, r0
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	460d      	mov	r5, r1
 80031a2:	4614      	mov	r4, r2
 80031a4:	b09d      	sub	sp, #116	; 0x74
 80031a6:	d50e      	bpl.n	80031c6 <_svfiprintf_r+0x32>
 80031a8:	690b      	ldr	r3, [r1, #16]
 80031aa:	b963      	cbnz	r3, 80031c6 <_svfiprintf_r+0x32>
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f000 fb17 	bl	80037e0 <_malloc_r>
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	6128      	str	r0, [r5, #16]
 80031b6:	b920      	cbnz	r0, 80031c2 <_svfiprintf_r+0x2e>
 80031b8:	230c      	movs	r3, #12
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	e0d1      	b.n	8003366 <_svfiprintf_r+0x1d2>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ca:	2320      	movs	r3, #32
 80031cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d0:	2330      	movs	r3, #48	; 0x30
 80031d2:	f04f 0901 	mov.w	r9, #1
 80031d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80031da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003380 <_svfiprintf_r+0x1ec>
 80031de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031e2:	4623      	mov	r3, r4
 80031e4:	469a      	mov	sl, r3
 80031e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ea:	b10a      	cbz	r2, 80031f0 <_svfiprintf_r+0x5c>
 80031ec:	2a25      	cmp	r2, #37	; 0x25
 80031ee:	d1f9      	bne.n	80031e4 <_svfiprintf_r+0x50>
 80031f0:	ebba 0b04 	subs.w	fp, sl, r4
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x7a>
 80031f6:	465b      	mov	r3, fp
 80031f8:	4622      	mov	r2, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	f7ff ff6d 	bl	80030dc <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80aa 	beq.w	800335c <_svfiprintf_r+0x1c8>
 8003208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800320a:	445a      	add	r2, fp
 800320c:	9209      	str	r2, [sp, #36]	; 0x24
 800320e:	f89a 3000 	ldrb.w	r3, [sl]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a2 	beq.w	800335c <_svfiprintf_r+0x1c8>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003222:	f10a 0a01 	add.w	sl, sl, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	9307      	str	r3, [sp, #28]
 800322a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322e:	931a      	str	r3, [sp, #104]	; 0x68
 8003230:	4654      	mov	r4, sl
 8003232:	2205      	movs	r2, #5
 8003234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003238:	4851      	ldr	r0, [pc, #324]	; (8003380 <_svfiprintf_r+0x1ec>)
 800323a:	f000 fa41 	bl	80036c0 <memchr>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	b9d8      	cbnz	r0, 800327a <_svfiprintf_r+0xe6>
 8003242:	06d0      	lsls	r0, r2, #27
 8003244:	bf44      	itt	mi
 8003246:	2320      	movmi	r3, #32
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324c:	0711      	lsls	r1, r2, #28
 800324e:	bf44      	itt	mi
 8003250:	232b      	movmi	r3, #43	; 0x2b
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d015      	beq.n	800328a <_svfiprintf_r+0xf6>
 800325e:	4654      	mov	r4, sl
 8003260:	2000      	movs	r0, #0
 8003262:	f04f 0c0a 	mov.w	ip, #10
 8003266:	9a07      	ldr	r2, [sp, #28]
 8003268:	4621      	mov	r1, r4
 800326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	2b09      	cmp	r3, #9
 8003272:	d94e      	bls.n	8003312 <_svfiprintf_r+0x17e>
 8003274:	b1b0      	cbz	r0, 80032a4 <_svfiprintf_r+0x110>
 8003276:	9207      	str	r2, [sp, #28]
 8003278:	e014      	b.n	80032a4 <_svfiprintf_r+0x110>
 800327a:	eba0 0308 	sub.w	r3, r0, r8
 800327e:	fa09 f303 	lsl.w	r3, r9, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	46a2      	mov	sl, r4
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	e7d2      	b.n	8003230 <_svfiprintf_r+0x9c>
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9103      	str	r1, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfbb      	ittet	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	f042 0202 	orrlt.w	r2, r2, #2
 800329c:	9307      	strge	r3, [sp, #28]
 800329e:	9307      	strlt	r3, [sp, #28]
 80032a0:	bfb8      	it	lt
 80032a2:	9204      	strlt	r2, [sp, #16]
 80032a4:	7823      	ldrb	r3, [r4, #0]
 80032a6:	2b2e      	cmp	r3, #46	; 0x2e
 80032a8:	d10c      	bne.n	80032c4 <_svfiprintf_r+0x130>
 80032aa:	7863      	ldrb	r3, [r4, #1]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d135      	bne.n	800331c <_svfiprintf_r+0x188>
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	3402      	adds	r4, #2
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9203      	str	r2, [sp, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfb8      	it	lt
 80032be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003384 <_svfiprintf_r+0x1f0>
 80032c8:	2203      	movs	r2, #3
 80032ca:	4650      	mov	r0, sl
 80032cc:	7821      	ldrb	r1, [r4, #0]
 80032ce:	f000 f9f7 	bl	80036c0 <memchr>
 80032d2:	b140      	cbz	r0, 80032e6 <_svfiprintf_r+0x152>
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	eba0 000a 	sub.w	r0, r0, sl
 80032da:	fa03 f000 	lsl.w	r0, r3, r0
 80032de:	9b04      	ldr	r3, [sp, #16]
 80032e0:	3401      	adds	r4, #1
 80032e2:	4303      	orrs	r3, r0
 80032e4:	9304      	str	r3, [sp, #16]
 80032e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ea:	2206      	movs	r2, #6
 80032ec:	4826      	ldr	r0, [pc, #152]	; (8003388 <_svfiprintf_r+0x1f4>)
 80032ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032f2:	f000 f9e5 	bl	80036c0 <memchr>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d038      	beq.n	800336c <_svfiprintf_r+0x1d8>
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <_svfiprintf_r+0x1f8>)
 80032fc:	bb1b      	cbnz	r3, 8003346 <_svfiprintf_r+0x1b2>
 80032fe:	9b03      	ldr	r3, [sp, #12]
 8003300:	3307      	adds	r3, #7
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	3308      	adds	r3, #8
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800330c:	4433      	add	r3, r6
 800330e:	9309      	str	r3, [sp, #36]	; 0x24
 8003310:	e767      	b.n	80031e2 <_svfiprintf_r+0x4e>
 8003312:	460c      	mov	r4, r1
 8003314:	2001      	movs	r0, #1
 8003316:	fb0c 3202 	mla	r2, ip, r2, r3
 800331a:	e7a5      	b.n	8003268 <_svfiprintf_r+0xd4>
 800331c:	2300      	movs	r3, #0
 800331e:	f04f 0c0a 	mov.w	ip, #10
 8003322:	4619      	mov	r1, r3
 8003324:	3401      	adds	r4, #1
 8003326:	9305      	str	r3, [sp, #20]
 8003328:	4620      	mov	r0, r4
 800332a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800332e:	3a30      	subs	r2, #48	; 0x30
 8003330:	2a09      	cmp	r2, #9
 8003332:	d903      	bls.n	800333c <_svfiprintf_r+0x1a8>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0c5      	beq.n	80032c4 <_svfiprintf_r+0x130>
 8003338:	9105      	str	r1, [sp, #20]
 800333a:	e7c3      	b.n	80032c4 <_svfiprintf_r+0x130>
 800333c:	4604      	mov	r4, r0
 800333e:	2301      	movs	r3, #1
 8003340:	fb0c 2101 	mla	r1, ip, r1, r2
 8003344:	e7f0      	b.n	8003328 <_svfiprintf_r+0x194>
 8003346:	ab03      	add	r3, sp, #12
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	462a      	mov	r2, r5
 800334c:	4638      	mov	r0, r7
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_svfiprintf_r+0x1fc>)
 8003350:	a904      	add	r1, sp, #16
 8003352:	f3af 8000 	nop.w
 8003356:	1c42      	adds	r2, r0, #1
 8003358:	4606      	mov	r6, r0
 800335a:	d1d6      	bne.n	800330a <_svfiprintf_r+0x176>
 800335c:	89ab      	ldrh	r3, [r5, #12]
 800335e:	065b      	lsls	r3, r3, #25
 8003360:	f53f af2c 	bmi.w	80031bc <_svfiprintf_r+0x28>
 8003364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003366:	b01d      	add	sp, #116	; 0x74
 8003368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336c:	ab03      	add	r3, sp, #12
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	462a      	mov	r2, r5
 8003372:	4638      	mov	r0, r7
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <_svfiprintf_r+0x1fc>)
 8003376:	a904      	add	r1, sp, #16
 8003378:	f000 f87c 	bl	8003474 <_printf_i>
 800337c:	e7eb      	b.n	8003356 <_svfiprintf_r+0x1c2>
 800337e:	bf00      	nop
 8003380:	080039fc 	.word	0x080039fc
 8003384:	08003a02 	.word	0x08003a02
 8003388:	08003a06 	.word	0x08003a06
 800338c:	00000000 	.word	0x00000000
 8003390:	080030dd 	.word	0x080030dd

08003394 <_printf_common>:
 8003394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	4616      	mov	r6, r2
 800339a:	4699      	mov	r9, r3
 800339c:	688a      	ldr	r2, [r1, #8]
 800339e:	690b      	ldr	r3, [r1, #16]
 80033a0:	4607      	mov	r7, r0
 80033a2:	4293      	cmp	r3, r2
 80033a4:	bfb8      	it	lt
 80033a6:	4613      	movlt	r3, r2
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ae:	460c      	mov	r4, r1
 80033b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033b4:	b10a      	cbz	r2, 80033ba <_printf_common+0x26>
 80033b6:	3301      	adds	r3, #1
 80033b8:	6033      	str	r3, [r6, #0]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	0699      	lsls	r1, r3, #26
 80033be:	bf42      	ittt	mi
 80033c0:	6833      	ldrmi	r3, [r6, #0]
 80033c2:	3302      	addmi	r3, #2
 80033c4:	6033      	strmi	r3, [r6, #0]
 80033c6:	6825      	ldr	r5, [r4, #0]
 80033c8:	f015 0506 	ands.w	r5, r5, #6
 80033cc:	d106      	bne.n	80033dc <_printf_common+0x48>
 80033ce:	f104 0a19 	add.w	sl, r4, #25
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	6832      	ldr	r2, [r6, #0]
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	42ab      	cmp	r3, r5
 80033da:	dc28      	bgt.n	800342e <_printf_common+0x9a>
 80033dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033e0:	1e13      	subs	r3, r2, #0
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	bf18      	it	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	0692      	lsls	r2, r2, #26
 80033ea:	d42d      	bmi.n	8003448 <_printf_common+0xb4>
 80033ec:	4649      	mov	r1, r9
 80033ee:	4638      	mov	r0, r7
 80033f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f4:	47c0      	blx	r8
 80033f6:	3001      	adds	r0, #1
 80033f8:	d020      	beq.n	800343c <_printf_common+0xa8>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	68e5      	ldr	r5, [r4, #12]
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf18      	it	ne
 8003406:	2500      	movne	r5, #0
 8003408:	6832      	ldr	r2, [r6, #0]
 800340a:	f04f 0600 	mov.w	r6, #0
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	bf08      	it	eq
 8003412:	1aad      	subeq	r5, r5, r2
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	bf08      	it	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	4293      	cmp	r3, r2
 800341e:	bfc4      	itt	gt
 8003420:	1a9b      	subgt	r3, r3, r2
 8003422:	18ed      	addgt	r5, r5, r3
 8003424:	341a      	adds	r4, #26
 8003426:	42b5      	cmp	r5, r6
 8003428:	d11a      	bne.n	8003460 <_printf_common+0xcc>
 800342a:	2000      	movs	r0, #0
 800342c:	e008      	b.n	8003440 <_printf_common+0xac>
 800342e:	2301      	movs	r3, #1
 8003430:	4652      	mov	r2, sl
 8003432:	4649      	mov	r1, r9
 8003434:	4638      	mov	r0, r7
 8003436:	47c0      	blx	r8
 8003438:	3001      	adds	r0, #1
 800343a:	d103      	bne.n	8003444 <_printf_common+0xb0>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003444:	3501      	adds	r5, #1
 8003446:	e7c4      	b.n	80033d2 <_printf_common+0x3e>
 8003448:	2030      	movs	r0, #48	; 0x30
 800344a:	18e1      	adds	r1, r4, r3
 800344c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003456:	4422      	add	r2, r4
 8003458:	3302      	adds	r3, #2
 800345a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800345e:	e7c5      	b.n	80033ec <_printf_common+0x58>
 8003460:	2301      	movs	r3, #1
 8003462:	4622      	mov	r2, r4
 8003464:	4649      	mov	r1, r9
 8003466:	4638      	mov	r0, r7
 8003468:	47c0      	blx	r8
 800346a:	3001      	adds	r0, #1
 800346c:	d0e6      	beq.n	800343c <_printf_common+0xa8>
 800346e:	3601      	adds	r6, #1
 8003470:	e7d9      	b.n	8003426 <_printf_common+0x92>
	...

08003474 <_printf_i>:
 8003474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	7e0f      	ldrb	r7, [r1, #24]
 800347a:	4691      	mov	r9, r2
 800347c:	2f78      	cmp	r7, #120	; 0x78
 800347e:	4680      	mov	r8, r0
 8003480:	460c      	mov	r4, r1
 8003482:	469a      	mov	sl, r3
 8003484:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800348a:	d807      	bhi.n	800349c <_printf_i+0x28>
 800348c:	2f62      	cmp	r7, #98	; 0x62
 800348e:	d80a      	bhi.n	80034a6 <_printf_i+0x32>
 8003490:	2f00      	cmp	r7, #0
 8003492:	f000 80d9 	beq.w	8003648 <_printf_i+0x1d4>
 8003496:	2f58      	cmp	r7, #88	; 0x58
 8003498:	f000 80a4 	beq.w	80035e4 <_printf_i+0x170>
 800349c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034a4:	e03a      	b.n	800351c <_printf_i+0xa8>
 80034a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034aa:	2b15      	cmp	r3, #21
 80034ac:	d8f6      	bhi.n	800349c <_printf_i+0x28>
 80034ae:	a101      	add	r1, pc, #4	; (adr r1, 80034b4 <_printf_i+0x40>)
 80034b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034b4:	0800350d 	.word	0x0800350d
 80034b8:	08003521 	.word	0x08003521
 80034bc:	0800349d 	.word	0x0800349d
 80034c0:	0800349d 	.word	0x0800349d
 80034c4:	0800349d 	.word	0x0800349d
 80034c8:	0800349d 	.word	0x0800349d
 80034cc:	08003521 	.word	0x08003521
 80034d0:	0800349d 	.word	0x0800349d
 80034d4:	0800349d 	.word	0x0800349d
 80034d8:	0800349d 	.word	0x0800349d
 80034dc:	0800349d 	.word	0x0800349d
 80034e0:	0800362f 	.word	0x0800362f
 80034e4:	08003551 	.word	0x08003551
 80034e8:	08003611 	.word	0x08003611
 80034ec:	0800349d 	.word	0x0800349d
 80034f0:	0800349d 	.word	0x0800349d
 80034f4:	08003651 	.word	0x08003651
 80034f8:	0800349d 	.word	0x0800349d
 80034fc:	08003551 	.word	0x08003551
 8003500:	0800349d 	.word	0x0800349d
 8003504:	0800349d 	.word	0x0800349d
 8003508:	08003619 	.word	0x08003619
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	602a      	str	r2, [r5, #0]
 8003514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800351c:	2301      	movs	r3, #1
 800351e:	e0a4      	b.n	800366a <_printf_i+0x1f6>
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	6829      	ldr	r1, [r5, #0]
 8003524:	0606      	lsls	r6, r0, #24
 8003526:	f101 0304 	add.w	r3, r1, #4
 800352a:	d50a      	bpl.n	8003542 <_printf_i+0xce>
 800352c:	680e      	ldr	r6, [r1, #0]
 800352e:	602b      	str	r3, [r5, #0]
 8003530:	2e00      	cmp	r6, #0
 8003532:	da03      	bge.n	800353c <_printf_i+0xc8>
 8003534:	232d      	movs	r3, #45	; 0x2d
 8003536:	4276      	negs	r6, r6
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353c:	230a      	movs	r3, #10
 800353e:	485e      	ldr	r0, [pc, #376]	; (80036b8 <_printf_i+0x244>)
 8003540:	e019      	b.n	8003576 <_printf_i+0x102>
 8003542:	680e      	ldr	r6, [r1, #0]
 8003544:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	bf18      	it	ne
 800354c:	b236      	sxthne	r6, r6
 800354e:	e7ef      	b.n	8003530 <_printf_i+0xbc>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	1d19      	adds	r1, r3, #4
 8003556:	6029      	str	r1, [r5, #0]
 8003558:	0601      	lsls	r1, r0, #24
 800355a:	d501      	bpl.n	8003560 <_printf_i+0xec>
 800355c:	681e      	ldr	r6, [r3, #0]
 800355e:	e002      	b.n	8003566 <_printf_i+0xf2>
 8003560:	0646      	lsls	r6, r0, #25
 8003562:	d5fb      	bpl.n	800355c <_printf_i+0xe8>
 8003564:	881e      	ldrh	r6, [r3, #0]
 8003566:	2f6f      	cmp	r7, #111	; 0x6f
 8003568:	bf0c      	ite	eq
 800356a:	2308      	moveq	r3, #8
 800356c:	230a      	movne	r3, #10
 800356e:	4852      	ldr	r0, [pc, #328]	; (80036b8 <_printf_i+0x244>)
 8003570:	2100      	movs	r1, #0
 8003572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003576:	6865      	ldr	r5, [r4, #4]
 8003578:	2d00      	cmp	r5, #0
 800357a:	bfa8      	it	ge
 800357c:	6821      	ldrge	r1, [r4, #0]
 800357e:	60a5      	str	r5, [r4, #8]
 8003580:	bfa4      	itt	ge
 8003582:	f021 0104 	bicge.w	r1, r1, #4
 8003586:	6021      	strge	r1, [r4, #0]
 8003588:	b90e      	cbnz	r6, 800358e <_printf_i+0x11a>
 800358a:	2d00      	cmp	r5, #0
 800358c:	d04d      	beq.n	800362a <_printf_i+0x1b6>
 800358e:	4615      	mov	r5, r2
 8003590:	fbb6 f1f3 	udiv	r1, r6, r3
 8003594:	fb03 6711 	mls	r7, r3, r1, r6
 8003598:	5dc7      	ldrb	r7, [r0, r7]
 800359a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800359e:	4637      	mov	r7, r6
 80035a0:	42bb      	cmp	r3, r7
 80035a2:	460e      	mov	r6, r1
 80035a4:	d9f4      	bls.n	8003590 <_printf_i+0x11c>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d10b      	bne.n	80035c2 <_printf_i+0x14e>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	07de      	lsls	r6, r3, #31
 80035ae:	d508      	bpl.n	80035c2 <_printf_i+0x14e>
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	6861      	ldr	r1, [r4, #4]
 80035b4:	4299      	cmp	r1, r3
 80035b6:	bfde      	ittt	le
 80035b8:	2330      	movle	r3, #48	; 0x30
 80035ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035c2:	1b52      	subs	r2, r2, r5
 80035c4:	6122      	str	r2, [r4, #16]
 80035c6:	464b      	mov	r3, r9
 80035c8:	4621      	mov	r1, r4
 80035ca:	4640      	mov	r0, r8
 80035cc:	f8cd a000 	str.w	sl, [sp]
 80035d0:	aa03      	add	r2, sp, #12
 80035d2:	f7ff fedf 	bl	8003394 <_printf_common>
 80035d6:	3001      	adds	r0, #1
 80035d8:	d14c      	bne.n	8003674 <_printf_i+0x200>
 80035da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035de:	b004      	add	sp, #16
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	4834      	ldr	r0, [pc, #208]	; (80036b8 <_printf_i+0x244>)
 80035e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035ea:	6829      	ldr	r1, [r5, #0]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80035f2:	6029      	str	r1, [r5, #0]
 80035f4:	061d      	lsls	r5, r3, #24
 80035f6:	d514      	bpl.n	8003622 <_printf_i+0x1ae>
 80035f8:	07df      	lsls	r7, r3, #31
 80035fa:	bf44      	itt	mi
 80035fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003600:	6023      	strmi	r3, [r4, #0]
 8003602:	b91e      	cbnz	r6, 800360c <_printf_i+0x198>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	2310      	movs	r3, #16
 800360e:	e7af      	b.n	8003570 <_printf_i+0xfc>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	2378      	movs	r3, #120	; 0x78
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <_printf_i+0x248>)
 800361c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003620:	e7e3      	b.n	80035ea <_printf_i+0x176>
 8003622:	0659      	lsls	r1, r3, #25
 8003624:	bf48      	it	mi
 8003626:	b2b6      	uxthmi	r6, r6
 8003628:	e7e6      	b.n	80035f8 <_printf_i+0x184>
 800362a:	4615      	mov	r5, r2
 800362c:	e7bb      	b.n	80035a6 <_printf_i+0x132>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	6826      	ldr	r6, [r4, #0]
 8003632:	1d18      	adds	r0, r3, #4
 8003634:	6961      	ldr	r1, [r4, #20]
 8003636:	6028      	str	r0, [r5, #0]
 8003638:	0635      	lsls	r5, r6, #24
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	d501      	bpl.n	8003642 <_printf_i+0x1ce>
 800363e:	6019      	str	r1, [r3, #0]
 8003640:	e002      	b.n	8003648 <_printf_i+0x1d4>
 8003642:	0670      	lsls	r0, r6, #25
 8003644:	d5fb      	bpl.n	800363e <_printf_i+0x1ca>
 8003646:	8019      	strh	r1, [r3, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	4615      	mov	r5, r2
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	e7ba      	b.n	80035c6 <_printf_i+0x152>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	2100      	movs	r1, #0
 8003654:	1d1a      	adds	r2, r3, #4
 8003656:	602a      	str	r2, [r5, #0]
 8003658:	681d      	ldr	r5, [r3, #0]
 800365a:	6862      	ldr	r2, [r4, #4]
 800365c:	4628      	mov	r0, r5
 800365e:	f000 f82f 	bl	80036c0 <memchr>
 8003662:	b108      	cbz	r0, 8003668 <_printf_i+0x1f4>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	6060      	str	r0, [r4, #4]
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	6123      	str	r3, [r4, #16]
 800366c:	2300      	movs	r3, #0
 800366e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003672:	e7a8      	b.n	80035c6 <_printf_i+0x152>
 8003674:	462a      	mov	r2, r5
 8003676:	4649      	mov	r1, r9
 8003678:	4640      	mov	r0, r8
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	47d0      	blx	sl
 800367e:	3001      	adds	r0, #1
 8003680:	d0ab      	beq.n	80035da <_printf_i+0x166>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	079b      	lsls	r3, r3, #30
 8003686:	d413      	bmi.n	80036b0 <_printf_i+0x23c>
 8003688:	68e0      	ldr	r0, [r4, #12]
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	4298      	cmp	r0, r3
 800368e:	bfb8      	it	lt
 8003690:	4618      	movlt	r0, r3
 8003692:	e7a4      	b.n	80035de <_printf_i+0x16a>
 8003694:	2301      	movs	r3, #1
 8003696:	4632      	mov	r2, r6
 8003698:	4649      	mov	r1, r9
 800369a:	4640      	mov	r0, r8
 800369c:	47d0      	blx	sl
 800369e:	3001      	adds	r0, #1
 80036a0:	d09b      	beq.n	80035da <_printf_i+0x166>
 80036a2:	3501      	adds	r5, #1
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	9903      	ldr	r1, [sp, #12]
 80036a8:	1a5b      	subs	r3, r3, r1
 80036aa:	42ab      	cmp	r3, r5
 80036ac:	dcf2      	bgt.n	8003694 <_printf_i+0x220>
 80036ae:	e7eb      	b.n	8003688 <_printf_i+0x214>
 80036b0:	2500      	movs	r5, #0
 80036b2:	f104 0619 	add.w	r6, r4, #25
 80036b6:	e7f5      	b.n	80036a4 <_printf_i+0x230>
 80036b8:	08003a0d 	.word	0x08003a0d
 80036bc:	08003a1e 	.word	0x08003a1e

080036c0 <memchr>:
 80036c0:	4603      	mov	r3, r0
 80036c2:	b510      	push	{r4, lr}
 80036c4:	b2c9      	uxtb	r1, r1
 80036c6:	4402      	add	r2, r0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	d101      	bne.n	80036d2 <memchr+0x12>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e003      	b.n	80036da <memchr+0x1a>
 80036d2:	7804      	ldrb	r4, [r0, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	428c      	cmp	r4, r1
 80036d8:	d1f6      	bne.n	80036c8 <memchr+0x8>
 80036da:	bd10      	pop	{r4, pc}

080036dc <memmove>:
 80036dc:	4288      	cmp	r0, r1
 80036de:	b510      	push	{r4, lr}
 80036e0:	eb01 0402 	add.w	r4, r1, r2
 80036e4:	d902      	bls.n	80036ec <memmove+0x10>
 80036e6:	4284      	cmp	r4, r0
 80036e8:	4623      	mov	r3, r4
 80036ea:	d807      	bhi.n	80036fc <memmove+0x20>
 80036ec:	1e43      	subs	r3, r0, #1
 80036ee:	42a1      	cmp	r1, r4
 80036f0:	d008      	beq.n	8003704 <memmove+0x28>
 80036f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036fa:	e7f8      	b.n	80036ee <memmove+0x12>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4402      	add	r2, r0
 8003700:	428a      	cmp	r2, r1
 8003702:	d100      	bne.n	8003706 <memmove+0x2a>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800370a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370e:	e7f7      	b.n	8003700 <memmove+0x24>

08003710 <_free_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4605      	mov	r5, r0
 8003714:	2900      	cmp	r1, #0
 8003716:	d040      	beq.n	800379a <_free_r+0x8a>
 8003718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371c:	1f0c      	subs	r4, r1, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb8      	it	lt
 8003722:	18e4      	addlt	r4, r4, r3
 8003724:	f000 f910 	bl	8003948 <__malloc_lock>
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <_free_r+0x8c>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	b933      	cbnz	r3, 800373c <_free_r+0x2c>
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	6014      	str	r4, [r2, #0]
 8003732:	4628      	mov	r0, r5
 8003734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003738:	f000 b90c 	b.w	8003954 <__malloc_unlock>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d908      	bls.n	8003752 <_free_r+0x42>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	1821      	adds	r1, r4, r0
 8003744:	428b      	cmp	r3, r1
 8003746:	bf01      	itttt	eq
 8003748:	6819      	ldreq	r1, [r3, #0]
 800374a:	685b      	ldreq	r3, [r3, #4]
 800374c:	1809      	addeq	r1, r1, r0
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	e7ed      	b.n	800372e <_free_r+0x1e>
 8003752:	461a      	mov	r2, r3
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b10b      	cbz	r3, 800375c <_free_r+0x4c>
 8003758:	42a3      	cmp	r3, r4
 800375a:	d9fa      	bls.n	8003752 <_free_r+0x42>
 800375c:	6811      	ldr	r1, [r2, #0]
 800375e:	1850      	adds	r0, r2, r1
 8003760:	42a0      	cmp	r0, r4
 8003762:	d10b      	bne.n	800377c <_free_r+0x6c>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	4401      	add	r1, r0
 8003768:	1850      	adds	r0, r2, r1
 800376a:	4283      	cmp	r3, r0
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	d1e0      	bne.n	8003732 <_free_r+0x22>
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4401      	add	r1, r0
 8003776:	6011      	str	r1, [r2, #0]
 8003778:	6053      	str	r3, [r2, #4]
 800377a:	e7da      	b.n	8003732 <_free_r+0x22>
 800377c:	d902      	bls.n	8003784 <_free_r+0x74>
 800377e:	230c      	movs	r3, #12
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	e7d6      	b.n	8003732 <_free_r+0x22>
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	1821      	adds	r1, r4, r0
 8003788:	428b      	cmp	r3, r1
 800378a:	bf01      	itttt	eq
 800378c:	6819      	ldreq	r1, [r3, #0]
 800378e:	685b      	ldreq	r3, [r3, #4]
 8003790:	1809      	addeq	r1, r1, r0
 8003792:	6021      	streq	r1, [r4, #0]
 8003794:	6063      	str	r3, [r4, #4]
 8003796:	6054      	str	r4, [r2, #4]
 8003798:	e7cb      	b.n	8003732 <_free_r+0x22>
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20006594 	.word	0x20006594

080037a0 <sbrk_aligned>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4e0e      	ldr	r6, [pc, #56]	; (80037dc <sbrk_aligned+0x3c>)
 80037a4:	460c      	mov	r4, r1
 80037a6:	6831      	ldr	r1, [r6, #0]
 80037a8:	4605      	mov	r5, r0
 80037aa:	b911      	cbnz	r1, 80037b2 <sbrk_aligned+0x12>
 80037ac:	f000 f8bc 	bl	8003928 <_sbrk_r>
 80037b0:	6030      	str	r0, [r6, #0]
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f8b7 	bl	8003928 <_sbrk_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	d00a      	beq.n	80037d4 <sbrk_aligned+0x34>
 80037be:	1cc4      	adds	r4, r0, #3
 80037c0:	f024 0403 	bic.w	r4, r4, #3
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d007      	beq.n	80037d8 <sbrk_aligned+0x38>
 80037c8:	1a21      	subs	r1, r4, r0
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 f8ac 	bl	8003928 <_sbrk_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d101      	bne.n	80037d8 <sbrk_aligned+0x38>
 80037d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80037d8:	4620      	mov	r0, r4
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	20006598 	.word	0x20006598

080037e0 <_malloc_r>:
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	1ccd      	adds	r5, r1, #3
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	4607      	mov	r7, r0
 80037f6:	db01      	blt.n	80037fc <_malloc_r+0x1c>
 80037f8:	42a9      	cmp	r1, r5
 80037fa:	d905      	bls.n	8003808 <_malloc_r+0x28>
 80037fc:	230c      	movs	r3, #12
 80037fe:	2600      	movs	r6, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4630      	mov	r0, r6
 8003804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003808:	4e2e      	ldr	r6, [pc, #184]	; (80038c4 <_malloc_r+0xe4>)
 800380a:	f000 f89d 	bl	8003948 <__malloc_lock>
 800380e:	6833      	ldr	r3, [r6, #0]
 8003810:	461c      	mov	r4, r3
 8003812:	bb34      	cbnz	r4, 8003862 <_malloc_r+0x82>
 8003814:	4629      	mov	r1, r5
 8003816:	4638      	mov	r0, r7
 8003818:	f7ff ffc2 	bl	80037a0 <sbrk_aligned>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	4604      	mov	r4, r0
 8003820:	d14d      	bne.n	80038be <_malloc_r+0xde>
 8003822:	6834      	ldr	r4, [r6, #0]
 8003824:	4626      	mov	r6, r4
 8003826:	2e00      	cmp	r6, #0
 8003828:	d140      	bne.n	80038ac <_malloc_r+0xcc>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	4631      	mov	r1, r6
 800382e:	4638      	mov	r0, r7
 8003830:	eb04 0803 	add.w	r8, r4, r3
 8003834:	f000 f878 	bl	8003928 <_sbrk_r>
 8003838:	4580      	cmp	r8, r0
 800383a:	d13a      	bne.n	80038b2 <_malloc_r+0xd2>
 800383c:	6821      	ldr	r1, [r4, #0]
 800383e:	3503      	adds	r5, #3
 8003840:	1a6d      	subs	r5, r5, r1
 8003842:	f025 0503 	bic.w	r5, r5, #3
 8003846:	3508      	adds	r5, #8
 8003848:	2d0c      	cmp	r5, #12
 800384a:	bf38      	it	cc
 800384c:	250c      	movcc	r5, #12
 800384e:	4638      	mov	r0, r7
 8003850:	4629      	mov	r1, r5
 8003852:	f7ff ffa5 	bl	80037a0 <sbrk_aligned>
 8003856:	3001      	adds	r0, #1
 8003858:	d02b      	beq.n	80038b2 <_malloc_r+0xd2>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	442b      	add	r3, r5
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	e00e      	b.n	8003880 <_malloc_r+0xa0>
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	1b52      	subs	r2, r2, r5
 8003866:	d41e      	bmi.n	80038a6 <_malloc_r+0xc6>
 8003868:	2a0b      	cmp	r2, #11
 800386a:	d916      	bls.n	800389a <_malloc_r+0xba>
 800386c:	1961      	adds	r1, r4, r5
 800386e:	42a3      	cmp	r3, r4
 8003870:	6025      	str	r5, [r4, #0]
 8003872:	bf18      	it	ne
 8003874:	6059      	strne	r1, [r3, #4]
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	bf08      	it	eq
 800387a:	6031      	streq	r1, [r6, #0]
 800387c:	5162      	str	r2, [r4, r5]
 800387e:	604b      	str	r3, [r1, #4]
 8003880:	4638      	mov	r0, r7
 8003882:	f104 060b 	add.w	r6, r4, #11
 8003886:	f000 f865 	bl	8003954 <__malloc_unlock>
 800388a:	f026 0607 	bic.w	r6, r6, #7
 800388e:	1d23      	adds	r3, r4, #4
 8003890:	1af2      	subs	r2, r6, r3
 8003892:	d0b6      	beq.n	8003802 <_malloc_r+0x22>
 8003894:	1b9b      	subs	r3, r3, r6
 8003896:	50a3      	str	r3, [r4, r2]
 8003898:	e7b3      	b.n	8003802 <_malloc_r+0x22>
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	42a3      	cmp	r3, r4
 800389e:	bf0c      	ite	eq
 80038a0:	6032      	streq	r2, [r6, #0]
 80038a2:	605a      	strne	r2, [r3, #4]
 80038a4:	e7ec      	b.n	8003880 <_malloc_r+0xa0>
 80038a6:	4623      	mov	r3, r4
 80038a8:	6864      	ldr	r4, [r4, #4]
 80038aa:	e7b2      	b.n	8003812 <_malloc_r+0x32>
 80038ac:	4634      	mov	r4, r6
 80038ae:	6876      	ldr	r6, [r6, #4]
 80038b0:	e7b9      	b.n	8003826 <_malloc_r+0x46>
 80038b2:	230c      	movs	r3, #12
 80038b4:	4638      	mov	r0, r7
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	f000 f84c 	bl	8003954 <__malloc_unlock>
 80038bc:	e7a1      	b.n	8003802 <_malloc_r+0x22>
 80038be:	6025      	str	r5, [r4, #0]
 80038c0:	e7de      	b.n	8003880 <_malloc_r+0xa0>
 80038c2:	bf00      	nop
 80038c4:	20006594 	.word	0x20006594

080038c8 <_realloc_r>:
 80038c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038cc:	4680      	mov	r8, r0
 80038ce:	4614      	mov	r4, r2
 80038d0:	460e      	mov	r6, r1
 80038d2:	b921      	cbnz	r1, 80038de <_realloc_r+0x16>
 80038d4:	4611      	mov	r1, r2
 80038d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038da:	f7ff bf81 	b.w	80037e0 <_malloc_r>
 80038de:	b92a      	cbnz	r2, 80038ec <_realloc_r+0x24>
 80038e0:	f7ff ff16 	bl	8003710 <_free_r>
 80038e4:	4625      	mov	r5, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ec:	f000 f838 	bl	8003960 <_malloc_usable_size_r>
 80038f0:	4284      	cmp	r4, r0
 80038f2:	4607      	mov	r7, r0
 80038f4:	d802      	bhi.n	80038fc <_realloc_r+0x34>
 80038f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038fa:	d812      	bhi.n	8003922 <_realloc_r+0x5a>
 80038fc:	4621      	mov	r1, r4
 80038fe:	4640      	mov	r0, r8
 8003900:	f7ff ff6e 	bl	80037e0 <_malloc_r>
 8003904:	4605      	mov	r5, r0
 8003906:	2800      	cmp	r0, #0
 8003908:	d0ed      	beq.n	80038e6 <_realloc_r+0x1e>
 800390a:	42bc      	cmp	r4, r7
 800390c:	4622      	mov	r2, r4
 800390e:	4631      	mov	r1, r6
 8003910:	bf28      	it	cs
 8003912:	463a      	movcs	r2, r7
 8003914:	f7ff fb96 	bl	8003044 <memcpy>
 8003918:	4631      	mov	r1, r6
 800391a:	4640      	mov	r0, r8
 800391c:	f7ff fef8 	bl	8003710 <_free_r>
 8003920:	e7e1      	b.n	80038e6 <_realloc_r+0x1e>
 8003922:	4635      	mov	r5, r6
 8003924:	e7df      	b.n	80038e6 <_realloc_r+0x1e>
	...

08003928 <_sbrk_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	2300      	movs	r3, #0
 800392c:	4d05      	ldr	r5, [pc, #20]	; (8003944 <_sbrk_r+0x1c>)
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fd f8c4 	bl	8000ac0 <_sbrk>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_sbrk_r+0x1a>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_sbrk_r+0x1a>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	2000659c 	.word	0x2000659c

08003948 <__malloc_lock>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__malloc_lock+0x8>)
 800394a:	f000 b811 	b.w	8003970 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	200065a0 	.word	0x200065a0

08003954 <__malloc_unlock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_unlock+0x8>)
 8003956:	f000 b80c 	b.w	8003972 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	200065a0 	.word	0x200065a0

08003960 <_malloc_usable_size_r>:
 8003960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003964:	1f18      	subs	r0, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	bfbc      	itt	lt
 800396a:	580b      	ldrlt	r3, [r1, r0]
 800396c:	18c0      	addlt	r0, r0, r3
 800396e:	4770      	bx	lr

08003970 <__retarget_lock_acquire_recursive>:
 8003970:	4770      	bx	lr

08003972 <__retarget_lock_release_recursive>:
 8003972:	4770      	bx	lr

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
