/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "w25qxx.h"
#include "string.h"
#include <stdio.h>
#include <stdarg.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t buffer1[600] = "CiMIoIWuoAYQobqL54SKxQEYAyAAKAAyDAgAEAAYACAAKBowABIhCO/dlY3A/////wEVvBwkQh0RE+RBJQAAAAAtZmbGQDAAIhcwMCwwMCwwMCwwMCwwMCwwMCwwMCwwMCoXNDYsMDIsRkYsRkYsMDAsMDAsMDAsNjgyFzAwLDAwLEYwLDAwLDFELDAwLEIwLDY4OhcwNCw0MSwzMSwwQSwxRixBQSxBQSxBQUIXMDMsRDcsMzUsN0YsM0YsRUYsMDAsMDBaFzAwLDAwLDdELDAwLDAwLDNGLDIwLEY32gEGMC42LjEy5QEAAAAA6QEAAAAAAAAAAPEBundpPJW0sUCFAgAAAACKAgCSAiMaIQ17H/wu6jwiwBVkZlCPZAxVwB2ZkZxvEQ3APyAAKAAwAA==\r\n";
uint8_t buffer2[4100]= {0};
uint8_t buffer3[4100] = {0};
uint8_t buffer4[4100]= {0};
uint8_t buffer5[4100] = {0};
uint8_t buffer6[4100]= {0};
uint8_t buffer7[4100]= {0};
/*
typedef struct{
	uint32_t dataCount;
	uint32_t writtenDataByte;
	uint32_t writeOffset;
	uint32_t readData;
	//uint8_t readOffset;
	//uint32_t pageCount;
	uint16_t LastDataSize;
	uint32_t bufferCount;
	uint32_t bufferCountStore;
	uint32_t sectorNumber;
	//uint8_t pageBuffer[256];
}flashSpi_t;*/
extern flashSpi_t spistruct;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void printmsg(char *format,...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  W25qxx_Init();
  W25qxx_EraseSector(0);
  W25qxx_EraseSector(1);
  W25qxx_EraseSector(2);
  W25qxx_EraseSector(3);
  W25qxx_EraseSector(4);
  W25qxx_EraseSector(5);
  W25qxx_EraseSector(6);
  //spistruct.dataCount = 410;
  //spistruct.readData = 0;
  //spistruct.readOffset = 0;
  spistruct.writeOffset = 0;
  spistruct.sectorNumberforWrite = 0;
  spistruct.writtenDataByte = 0;
  spistruct.readDataByte = 0;
  spistruct.readOffset = 0;
  spistruct.sectorNumberforRead = 0;
  //spistruct.bufferCount = 0;
  //spistruct.pageCount = spistruct.dataSize / 256;
  //spistruct.endPageDataSize = spistruct.dataSize % 256;
for (int i = 0; i<50;i++){
	/*
	W25qxx_WriteSector(buffer1,spistruct.sectorNumber,spistruct.writeOffset,spistruct.dataCount);
	spistruct.writeOffset = spistruct.writeOffset + spistruct.dataCount;
	if(spistruct.writeOffset >= 4096){
		spistruct.sectorNumber++;
		spistruct.bufferCountTemp = spistruct.dataCount;
		spistruct.dataCount = ((spistruct.writeOffset)-4096);
		spistruct.writeOffset = 0;
		uint8_t temproryBuffer[spistruct.dataCount];
		memcpy(temproryBuffer,&buffer1[spistruct.bufferCountTemp-spistruct.dataCount],spistruct.dataCount*sizeof(uint8_t));
		W25qxx_WriteSector(temproryBuffer,spistruct.sectorNumber,spistruct.writeOffset,spistruct.dataCount);
		spistruct.writeOffset = spistruct.writeOffset + spistruct.dataCount;
		spistruct.dataCount = spistruct.bufferCountTemp ; // temporary
	}

	spistruct.LastDataSize = spistruct.dataCount ;
	spistruct.writtenDataByte = spistruct.dataCount + spistruct.writtenDataByte;
	*/
	W25qxx_Write(buffer1, 410);
}


W25qxx_ReadSector(buffer2, 0, 0, 4096);
W25qxx_ReadSector(buffer3, 1, 0, 4096);
W25qxx_ReadSector(buffer4, 2, 0, 4096);
W25qxx_ReadSector(buffer5, 3, 0, 4096);
W25qxx_ReadSector(buffer6, 4, 0, 4096);
W25qxx_ReadSector(buffer7, 5, 0, 4096);
W25qxx_ReadSector(buffer7, 6, 0, 4096);

for (int i = 0;i<50;i++){
	uint8_t buffer[2048],*ret = 0;
	uint32_t findWord = 0;
	uint16_t sendBufferOffset = 0;
	W25qxx_ReadSector(buffer, spistruct.sectorNumberforRead, spistruct.readOffset, 1024);
	ret = strstr(buffer,"\r\n");
	if(ret == 0){
		memcpy(spistruct.sendBuffer[sendBufferOffset],&buffer,(4096-spistruct.readOffset));
		sendBufferOffset = 4096-spistruct.readOffset;
		spistruct.sectorNumberforRead++;
		spistruct.readOffset = 0;
		W25qxx_ReadSector(buffer, spistruct.sectorNumberforRead, spistruct.readOffset, 1024);
		findWord = ret - buffer + 2;
		memcpy(&spistruct.sendBuffer[sendBufferOffset],&buffer,findWord*sizeof(uint8_t));
		spistruct.readOffset = findWord + spistruct.readOffset;

	}else{
		findWord = ret - buffer + 2;
		memcpy(spistruct.sendBuffer,&buffer,findWord*sizeof(uint8_t));
		spistruct.readOffset = findWord + spistruct.readOffset;
	}
	printmsg("%d-->%s\r\n",i,spistruct.sendBuffer);
	memset(spistruct.sendBuffer,0,sizeof(spistruct.sendBuffer));
	memset(buffer , 0 , sizeof(buffer));
}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void printmsg(char *format,...)
{
	char str[1024];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
	vsprintf(str, format,args);
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
	va_end(args);

}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
